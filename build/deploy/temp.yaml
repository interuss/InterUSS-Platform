---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    name: cockroachdb
  name: cockroachdb
  namespace: dss-main
spec:
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app: cockroachdb
  serviceName: cockroachdb
  template:
    metadata:
      annotations: {}
      labels:
        app: cockroachdb
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - cockroachdb
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - args:
        - --advertise-addr=${HOSTNAME##*-}.db.steeling-test.interussplatform.com
        - --cache=25%
        - --certs-dir=/cockroach-certs
        - --http-addr=0.0.0.0
        - --join=cockroachdb-0.cockroachdb.dss-main.svc.cluster.local
        - --locality-advertise-addr=zone=steeling@$(hostname -f)
        - --logtostderr=true
        - --max-sql-memory=25%
        command:
        - /bin/bash
        - -ecx
        - exec
        - /cockroach/cockroach
        - start
        env:
        - name: COCKROACH_CHANNEL
          value: kubernetes-multiregion
        image: cockroachdb/cockroach:v19.1.5
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 5
        name: cockroachdb
        ports:
        - containerPort: 26257
          name: cockroach
          targetPort: 26257
        - containerPort: 8080
          name: http
          targetPort: 8080
        readinessProbe:
          failureThreshold: 2
          httpGet:
            path: /health?ready=1
            port: http
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 5
        stdin: false
        tty: false
      serviceAccountName: cockroachdb
      terminationGracePeriodSeconds: 60
      volumes:
      - name: ca-certs
        secret:
          defaultMode: 256
          secretName: cockroachdb.ca.crt
      - name: client-certs
        secret:
          defaultMode: 256
          secretName: cockroachdb.client.root
      - name: datadir
        persistentVolumeClaim:
          claimName: datadir
      - name: node-certs
        secret:
          defaultMode: 256
          secretName: cockroachdb.node
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 100Gi
      storageClassName: standard
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app: cockroachdb
  name: cockroachdb
  namespace: dss-main
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - get
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/path: _status/vars
    prometheus.io/port: 8080
    prometheus.io/scrape: "true"
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  labels:
    app: cockroachdb
  name: cockroachdb
  namespace: dss-main
spec:
  clusterIP: None
  ports:
  - name: cockroach
    port: 26257
    targetPort: 26257
  - name: http
    port: 8080
    targetPort: 8080
  publishNotReadyAddresses: true
  selector:
    app: cockroachdb
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: cockroachdb
  name: cockroachdb
  namespace: dss-main
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels:
    app: cockroachdb
    name: cockroach-db-external-balanced
  name: cockroach-db-external-balanced
  namespace: dss-main
spec:
  loadBalancerIP: 10.10.10.10
  ports:
  - name: cockroach-db-external-balanced
    port: 26257
    targetPort: 26257
  selector:
    app: cockroachdb
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels:
    app: cockroachdb
    name: cockroach-db-external-node-0
  name: cockroach-db-external-node-0
  namespace: dss-main
spec:
  loadBalancerIP: 1.1.1.1
  ports:
  - name: cockroach-db-external-node-0
    port: 26257
    targetPort: 26257
  selector:
    statefulset.kubernetes.io/pod-name: cockroachdb-0
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels:
    app: cockroachdb
    name: cockroach-db-external-node-1
  name: cockroach-db-external-node-1
  namespace: dss-main
spec:
  loadBalancerIP: 2.2.2.2
  ports:
  - name: cockroach-db-external-node-1
    port: 26257
    targetPort: 26257
  selector:
    statefulset.kubernetes.io/pod-name: cockroachdb-1
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels:
    app: cockroachdb
    name: cockroach-db-external-node-2
  name: cockroach-db-external-node-2
  namespace: dss-main
spec:
  loadBalancerIP: 3.3.3.3
  ports:
  - name: cockroach-db-external-node-2
    port: 26257
    targetPort: 26257
  selector:
    statefulset.kubernetes.io/pod-name: cockroachdb-2
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cockroachdb
  name: cockroachdb-balanced
  namespace: dss-main
spec:
  ports:
  - name: cockroach
    port: 26257
    targetPort: 26257
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app: cockroachdb
  sessionAffinity: ClientIP
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  labels:
    app: cockroachdb
  name: cockroachdb-budget
  namespace: dss-main
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: cockroachdb
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app: cockroachdb
  name: cockroachdb
  namespace: dss-main
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cockroachdb
subjects:
- kind: ServiceAccount
  name: cockroachdb
  namespace: dss-main
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: cockroachdb
  name: cockroachdb
rules:
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - create
  - get
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: cockroachdb
  name: cockroachdb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cockroachdb
subjects:
- kind: ServiceAccount
  name: cockroachdb
  namespace: default
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    name: grpc-backend
  name: grpc-backend
  namespace: dss-main
spec:
  minReadySeconds: 30
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: grpc-backend
    spec:
      containers:
      - args:
        - --addr=:8081
        - --cockroach_host=cockroachdb-balanced.dss-main
        - --cockroach_port=26257
        - --cockroach_ssl_dir=/cockroach-certs
        - --cockroach_ssl_mode=verify-full
        - --cockroach_user=root
        - --dump_requests=true
        - --jwt_audience=example.com
        - --public_key_file=/public-certs/us-demo.pem
        command:
        - grpc-backend
        image: backend:v1
        imagePullPolicy: IfNotPresent
        name: grpc-backend
        ports:
        - containerPort: 8081
          name: grpc
        stdin: false
        tty: false
        volumeMounts:
        - mountPath: /cockroach/cockroach-certs/ca.crt
          name: ca-certs
          subPath: ca.crt
        - mountPath: /cockroach/cockroach-certs/client.root.crt
          name: client-certs
          subPath: client.root.crt
        - mountPath: /cockroach/cockroach-certs/client.root.key
          name: client-certs
          subPath: client.root.key
        - mountPath: /public-certs
          name: public-certs
      terminationGracePeriodSeconds: 30
      volumes:
      - name: ca-certs
        secret:
          defaultMode: 256
          secretName: cockroachdb.ca.crt
      - name: client-certs
        secret:
          defaultMode: 256
          secretName: cockroachdb.client.root
      - name: public-certs
        secret:
          defaultMode: 256
          secretName: dss.public.certs
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/path: _status/vars
    prometheus.io/port: 8081
    prometheus.io/scrape: "true"
  labels:
    app: grpc-backend
    name: grpc-backend
  name: grpc-backend
  namespace: dss-main
spec:
  ports:
  - name: grpc-backend
    port: 8081
    targetPort: 8081
  selector:
    app: grpc-backend
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: http-gateway
  name: http-gateway
  namespace: dss-main
spec:
  minReadySeconds: 30
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: http-gateway
    spec:
      containers:
      - args:
        - http-gateway
        - -grpc-backend=grpc-backend.dss-main:8081
        - -addr=:8080
        image: gateway:v1
        imagePullPolicy: IfNotPresent
        name: http-gateway
        ports:
        - containerPort: 8080
          name: http
        readinessProbe:
          httpGet:
            path: /healthy
            port: 8080
        stdin: false
        tty: false
      terminationGracePeriodSeconds: 30
      volumes: []
---
apiVersion: networking.gke.io/v1beta1
kind: ManagedCertificate
metadata:
  name: https-certificate
  namespace: dss-main
spec:
  domains:
  - example.com
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.allow-http: "false"
    kubernetes.io/ingress.global-static-ip-name: dss-frontend-ip
    networking.gke.io/managed-certificates: https-certificate
  name: https-ingress
  namespace: dss-main
spec:
  backend:
    serviceName: http-gateway
    servicePort: 8080
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/path: _status/vars
    prometheus.io/port: 8080
    prometheus.io/scrape: "true"
  labels:
    app: http-gateway
    name: http-gateway
  name: http-gateway
  namespace: dss-main
spec:
  ports:
  - name: http-gateway
    port: 8080
    targetPort: 8080
  selector:
    app: http-gateway
  type: NodePort
