#!/usr/bin/env python2

"""Tool to monitor a TCL4 InterUSS Platform Data Node in real time.


Copyright 2018 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import argparse
import copy
import datetime
import glob
import json
import os
import sys
import time

import termcolor

import client_tools
import reports

DEFAULT_POLL_INTERVAL = 5  # seconds


def print_no_newline(s):
  """Print a string without a trailing newline.

  Args:
    s: String to print.
  """
  sys.stdout.write(s)
  sys.stdout.flush()


def metadata_diff(old_metadata, new_metadata):
  """Return a USS Metadata dict containing only operators different in new relative to old.

  Args:
    old_metadata: USS Metadata dict translated from JSON returned from GridCellOperators endpoint.
    new_metadata: USS Metadata dict translated from JSON returned from GridCellOperators endpoint.

  Returns:
    USS Metadata dict with only changed operators between old and new.
  """
  diff = copy.deepcopy(new_metadata)
  diff['data']['operators'] = []
  def operator_name(entry):
    return '%s %d(%d, %d)' % (
      entry['uss'], entry['zoom'], entry['x'], entry['y'])
  old_operators = {operator_name(entry): entry
                   for entry in old_metadata['data']['operators']}
  new_operators = {operator_name(entry): entry
                   for entry in new_metadata['data']['operators']}

  for name, new_operator in new_operators.items():
    old_operator = old_operators.get(name, None)
    if old_operator and old_operator['version'] == new_operator['version']:
      continue
    diff['data']['operators'].append(new_operator)

  if 'uvrs' in diff['data']:
    diff['data']['uvrs'] = []
    if 'uvrs' in old_metadata['data']:
      old_uvrs = set(json.dumps(uvr) for uvr in old_metadata['data']['uvrs'])
    else:
      old_uvrs = set()
    for new_uvr in new_metadata['data']['uvrs']:
      if json.dumps(new_uvr) not in old_uvrs:
        diff['data']['uvrs'].append(new_uvr)

  return diff


def loop(auth_key, auth_url, output_path, node_url, poll_interval_seconds,
         record_operations):
  """Poll a TCL4 InterUSS Platform node and print and log any changes.

  Args:
    auth_key: Base64 user name and password for OAuth server.
    auth_url: URL of OAuth server.
    output_path: Local path to write JSON logs.
    node_url: URL of GridCellOperators TCL4 InterUSS Platform node endpoint.
    poll_interval_seconds: Number of seconds to wait between polling operations.
    record_operations: True to record operation details from USSs when changed.
  """

  # Define how to get an access token
  token_manager = client_tools.TokenManager(auth_url, auth_key)

  old_metadata = {'sync_token': None, 'data': {'operators': []}}
  if output_path:
    # Continue from where we left off
    files = sorted(glob.glob(os.path.join(output_path, '*_*.json')))
    files = [f for f in files if len(f) == len('YYYYMMDD_HHMMSS.json')]
    if files:
      with open(files[-1], 'r') as f:
        old_metadata = json.loads(f.read())
  operation_versions = {}

  first_time = True

  # Polling loop
  while True:
    # Poll metadata, refreshing access_token if necessary
    token = token_manager.get_token(client_tools.INTERUSS_SCOPE)
    new_metadata_string = client_tools.get_metadata(token, node_url)
    new_metadata = json.loads(new_metadata_string)

    if new_metadata['sync_token'] != old_metadata['sync_token']:
      # Data has changed; print out the changes
      print('')
      diff = metadata_diff(old_metadata, new_metadata)
      reports.print_operators(diff)

      if output_path:
        timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = os.path.join(output_path, timestamp + '.json')
        with open(filename, 'w') as f:
          f.write(new_metadata_string)

        if record_operations:
          for operator in diff['data']['operators']:
            for summary in operator['operations']:
              gufi = summary['gufi']
              version = summary['version']
              if gufi in operation_versions and operation_versions[gufi] == version:
                continue
              uss_token = token_manager.get_token(client_tools.USS_SCOPE)
              op_string, code = client_tools.get_operation(uss_token, operator['uss_baseurl'], gufi)
              try:
                op = json.loads(op_string)
              except ValueError:
                op = {}
              filename = os.path.join(output_path, timestamp + '_' + gufi + '.json')
              if code == 200 and op.get('gufi') == gufi:
                operation_versions[gufi] = version
              else:
                print(termcolor.colored(
                    'WARNING: Invalid operation from %s with GUFI %s written to %s' %
                    (operator.get('uss', '???'), gufi, filename)))
              with open(filename, 'w') as f:
                f.write(op_string)

      old_metadata = new_metadata

      if first_time:
        if not output_path:
          print(termcolor.colored(
            '*** WARNING: Not logging changes to disk ***', 'red', attrs=['blink']))
        first_time = False
    else:
      print_no_newline('.')
    time.sleep(poll_interval_seconds)


if __name__ == "__main__":
  parser = argparse.ArgumentParser(
    description='Monitor TCL4 InterUSS Platform grid cell metadata in real '
                'time, logging and displaying changes')
  client_tools.add_auth_arguments(parser)
  client_tools.add_node_arguments(parser)
  parser.add_argument(
    '-o',
    '--output_path',
    dest='output_path',
    help='Local filesystem path in which to write JSON server responses',
    metavar='OUTPUT_PATH')
  parser.add_argument(
    '-p',
    '--poll_interval',
    dest='poll_interval',
    type=float,
    default=DEFAULT_POLL_INTERVAL,
    help='Number of seconds to wait in between polling InterUSS Platform node',
    metavar='INTERVAL')
  parser.add_argument(
    '--record_operations',
    dest='record_operations',
    type=bool,
    default=False,
    metavar='RECORD')
  options = parser.parse_args()

  node_url = client_tools.make_node_url(options)

  loop(options.auth_key, options.auth_url, options.output_path, node_url,
       options.poll_interval, options.record_operations)
