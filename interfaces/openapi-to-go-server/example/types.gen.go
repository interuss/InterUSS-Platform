// This file is auto-generated; do not change as any changes will be overwritten
package main

// String whose format matches a version-4 UUID according to RFC 4122.
type UUIDv4Format string

// Identifier for an Entity communicated through the DSS.  Formatted as
// a UUIDv4.
type EntityID UUIDv4Format

// A token associated with a particular UTM Entity+version created
// by the DSS upon creation or modification of an Entity reference and provided
// to the client creating or modifying the Entity reference.  The EntityOVN
// is stored privately by the DSS and then compared against entries in a Key
// provided to mutate the airspace.  The EntityOVN is also provided by
// the client whenever that client transmits the full information of the Entity
// (either via GET, or via a subscription notification).
type EntityOVN string

// Identifier for a subscription communicated through the DSS.  Formatted
// as a UUIDv4.
type SubscriptionID UUIDv4Format

// Proof that a client has obtained the latest airspace content, used to ensure that write
// operations to the DSS occur only when the latest content is known (i.e. has been read). The
// client is required to pass a current Key constructed from information obtained with
// previous read operations and subsequent requests for full information, and optionally,
// subscription updates for deconflicted write operations to the DSS.  The contents of this
// data structure are generated by the client.
//
type Key []EntityOVN

type Time struct {
	// RFC3339-formatted time/date string.  The time zone must be 'Z'.
	Value string `json:"value"`

	Format string `json:"format"`
}

// Distance from the centerpoint of a circular area, along the WGS84 ellipsoid.
type RadiusValue float32

type Radius struct {
	// Distance from the centerpoint of a circular area, along the WGS84 ellipsoid.
	Value RadiusValue `json:"value"`

	// FIXM-compatible units.  Only meters ("M") are acceptable for UTM.
	Units string `json:"units"`
}

// The numeric value of the altitude. Note that min and max values are
// added as a sanity check. As use cases evolve and more options are
// made available in terms of units of measure or reference systems,
// these bounds may be re-evaluated.
type AltitudeValue float64

type Altitude struct {
	// The numeric value of the altitude. Note that min and max values are
	// added as a sanity check. As use cases evolve and more options are
	// made available in terms of units of measure or reference systems,
	// these bounds may be re-evaluated.
	Value AltitudeValue `json:"value"`

	// A code indicating the reference for a vertical distance. See AIXM 5.1
	// and FIXM 4.2.0. Currently, UTM only allows WGS84 with no immediate
	// plans to allow other options. FIXM and AIXM allow for 'SFC' which is
	// equivalent to AGL.
	Reference string `json:"reference"`

	// The reference quantities used to express the value of altitude. See
	// FIXM 4.2. Currently, UTM only allows meters with no immediate plans
	// to allow other options.
	Units string `json:"units"`
}

// Degrees of latitude north of the equator, with reference to the WGS84 ellipsoid.
type Latitude float64

// Degrees of longitude east of the Prime Meridian, with reference to the WGS84 ellipsoid.
type Longitude float64

// An enclosed area on the earth.
// The bounding edges of this polygon are defined to be the shortest paths between connected vertices.  This means, for instance, that the edge between two points both defined at a particular latitude is not generally contained at that latitude.
// The winding order must be interpreted as the order which produces the smaller area.
// The path between two vertices is defined to be the shortest possible path between those vertices.
// Edges may not cross.
// Vertices may not be duplicated.  In particular, the final polygon vertex must not be identical to the first vertex.
type Polygon struct {
	Vertices []LatLngPoint `json:"vertices"`
}

// Point on the earth's surface.
type LatLngPoint struct {
	Lng Longitude `json:"lng"`

	Lat Latitude `json:"lat"`
}

// A circular area on the surface of the earth.
type Circle struct {
	Center *LatLngPoint `json:"center"`

	Radius *Radius `json:"radius"`
}

// A three-dimensional geographic volume consisting of a vertically-extruded shape.
// Exactly one outline must be specified.
type Volume3D struct {
	// A circular geographic shape on the surface of the earth.
	OutlineCircle *Circle `json:"outline_circle"`

	// A polygonal geographic shape on the surface of the earth.
	OutlinePolygon *Polygon `json:"outline_polygon"`

	// Minimum bounding altitude of this volume. Must be less than altitude_upper, if specified.
	AltitudeLower *Altitude `json:"altitude_lower"`

	// Maximum bounding altitude of this volume. Must be greater than altitude_lower, if specified.
	AltitudeUpper *Altitude `json:"altitude_upper"`
}

// Contiguous block of geographic spacetime.
type Volume4D struct {
	Volume Volume3D `json:"volume"`

	// Beginning time of this volume. Must be before time_end.
	TimeStart *Time `json:"time_start"`

	// End time of this volume. Must be after time_start.
	TimeEnd *Time `json:"time_end"`
}

// Human-readable string returned when an error occurs
// as a result of a USS - DSS transaction.
type ErrorResponse struct {
	// Human-readable message indicating what error occurred and/or why.
	Message *string `json:"message"`
}

// State of subscription which is causing a notification to be sent.
type SubscriptionState struct {
	SubscriptionId SubscriptionID `json:"subscription_id"`

	NotificationIndex SubscriptionNotificationIndex `json:"notification_index"`
}

// Subscriber to notify of a change in the airspace.  This is provided by the DSS
// to a client changing the airspace, and it is the responsibility of that client
// to send a notification to the specified USS according to the change made to the
// airspace.
type SubscriberToNotify struct {
	// Subscription(s) prompting this notification.
	Subscriptions []SubscriptionState `json:"subscriptions"`

	UssBaseUrl SubscriptionUssBaseURL `json:"uss_base_url"`
}

// Specification of a geographic area that a client is interested
// in on an ongoing basis (e.g., "planning area").
type Subscription struct {
	Id SubscriptionID `json:"id"`

	// Version of the subscription that the DSS changes every time a USS changes the
	// subscription.  The DSS incrementing the notification_index does not constitute a
	// change that triggers a new version.  A USS must specify this version when modifying
	// an existing subscription to ensure consistency in read-modify-write operations and
	// distributed systems.
	Version string `json:"version"`

	NotificationIndex SubscriptionNotificationIndex `json:"notification_index"`

	// If set, this subscription will not receive notifications involving airspace changes
	// entirely before this time.
	TimeStart *Time `json:"time_start"`

	// If set, this subscription will not receive notifications involving airspace changes
	// entirely after this time.
	TimeEnd *Time `json:"time_end"`

	UssBaseUrl SubscriptionUssBaseURL `json:"uss_base_url"`

	// If true, trigger notifications when operational intents are created, updated, or deleted.  Otherwise, changes in operational intents should not trigger notifications.  The scope utm.strategic_coordination is required to set this flag true.
	NotifyForOperationalIntents *bool `json:"notify_for_operational_intents"`

	// If true, trigger notifications when constraints are created, updated, or deleted.  Otherwise, changes in constraints should not trigger notifications.  The scope utm.constraint_processing is required to set this flag true.
	NotifyForConstraints *bool `json:"notify_for_constraints"`

	// True if this subscription was implicitly created by the DSS via the creation of an
	// operational intent, and should therefore be deleted by the DSS when that operational intent is deleted.
	ImplicitSubscription *bool `json:"implicit_subscription"`

	// List of IDs for operational intents that are dependent on this subscription.
	DependentOperationalIntents *[]EntityID `json:"dependent_operational_intents"`
}

// Tracks the notifications sent for a subscription so the subscriber can detect missed notifications more easily.
type SubscriptionNotificationIndex int32

// Parameters for a request to find subscriptions matching the provided criteria.
type QuerySubscriptionParameters struct {
	AreaOfInterest *Volume4D `json:"area_of_interest"`
}

// Response to DSS query for subscriptions in a particular geographic area.
type QuerySubscriptionsResponse struct {
	// Subscriptions that overlap the specified geographic area.
	Subscriptions []Subscription `json:"subscriptions"`
}

// Response to DSS request for the subscription with the given id.
type GetSubscriptionResponse struct {
	Subscription Subscription `json:"subscription"`
}

// Parameters for a request to create/update a subscription in the DSS.  At least one form of
// notifications must be requested.
type PutSubscriptionParameters struct {
	// Spacetime extents of the volume to subscribe to.
	//
	// This subscription will automatically be deleted after its end time if it has not been
	// refreshed by then. If end time is not specified, the value will be chosen automatically
	// by the DSS. If start time is not specified, it will default to the time the request is
	// processed. The end time may not be in the past.
	//
	// Note that some Entities triggering notifications may lie entirely outside the requested
	// area.
	Extents Volume4D `json:"extents"`

	UssBaseUrl SubscriptionUssBaseURL `json:"uss_base_url"`

	// If true, trigger notifications when operational intents are created, updated, or deleted.  Otherwise, changes in operational intents should not trigger notifications.  The scope utm.strategic_coordination is required to set this flag true.
	NotifyForOperationalIntents *bool `json:"notify_for_operational_intents"`

	// If true, trigger notifications when constraints are created, updated, or deleted.  Otherwise, changes in constraints should not trigger notifications.  The scope utm.constraint_processing is required to set this flag true.
	NotifyForConstraints *bool `json:"notify_for_constraints"`
}

// The base URL of a USS implementation of the parts of the USS-USS API necessary for
// receiving the notifications requested by this subscription.
type SubscriptionUssBaseURL UssBaseURL

// Response for a request to create or update a subscription.
type PutSubscriptionResponse struct {
	Subscription Subscription `json:"subscription"`

	// Operational intents in or near the subscription area at the time of creation/update,
	// if `notify_for_operational_intents` is true.
	OperationalIntentReferences *[]OperationalIntentReference `json:"operational_intent_references"`

	// Constraints in or near the subscription area at the time of creation/update,
	// if `notify_for_constraints` is true.
	ConstraintReferences *[]ConstraintReference `json:"constraint_references"`
}

// Response for a successful request to delete a subscription.
type DeleteSubscriptionResponse struct {
	Subscription Subscription `json:"subscription"`
}

// The base URL of a USS implementation of part or all of the USS-USS API. Per the USS-USS API, the full URL
// of a particular resource can be constructed by appending, e.g., `/uss/v1/{resource}/{id}` to this base URL.
// Accordingly, this URL may not have a trailing '/' character.
type UssBaseURL string

// State of an operational intent.
//
// 'Accepted': Operational intent is created and shared, but not yet in use; see standard text for more details.
//
// The create or update request for this operational intent reference must include a Key containing all OVNs for
// all relevant Entities.
//
// 'Activated': Operational intent is in active use; see standard text for more details.
//
// The create or update request for this operational intent reference must include a Key containing all OVNs for
// all relevant Entities.
//
// 'Nonconforming': UA is temporarily outside its volumes, but the situation is expected to be recoverable; see
// standard text for more details.
//
// In this state, the `/uss/v1/operational_intents/{entityid}/telemetry' USS-USS endpoint should respond, if
// available, to queries from USS peers.  The create or update request for this operational intent may omit a Key
// in this case because the operational intent is being adjusted as flown and cannot necessarily deconflict.
//
// 'Contingent': UA is considered unrecoverably unable to conform with its coordinate operational intent; see
// standard text for more details.
//
// This state must transition to Ended.  In this state, the `/uss/v1/operational_intents/{entityid}/telemetry'
// USS-USS endpoint should respond, if available, to queries from USS peers.  The create or update request for
// this operational intent may omit a Key in this case because the operational intent is being adjusted as flown
// and cannot necessarily deconflict.
type OperationalIntentState string

const (
	OperationalIntentState_Accepted      OperationalIntentState = "Accepted"
	OperationalIntentState_Activated     OperationalIntentState = "Activated"
	OperationalIntentState_Nonconforming OperationalIntentState = "Nonconforming"
	OperationalIntentState_Contingent    OperationalIntentState = "Contingent"
)

// Numeric version of this operational intent which increments upon each change in the operational intent,
// regardless of whether any field of the operational intent reference changes.  A USS with the
// details of this operational intent when it was at a particular version does not need to retrieve
// the details again until the version changes.
type OperationalIntentReferenceVersion int32

// The high-level information of a planned or active operational intent with the URL
// of a USS to query for details.  Note: 'ovn' is returned ONLY to the USS that
// created the operational intent but NEVER to other USS instances.
type OperationalIntentReference struct {
	Id EntityID `json:"id"`

	// Created by the DSS based on creating client's ID (via access token).  Used internal
	// to the DSS for restricting mutation and deletion operations to manager.  Used by USSs
	// to reject operational intent update notifications originating from a USS that does not manage
	// the operational intent.
	Manager string `json:"manager"`

	UssAvailability UssAvailabilityState `json:"uss_availability"`

	// Numeric version of this operational intent which increments upon each change in the operational intent,
	// regardless of whether any field of the operational intent reference changes.  A USS with the
	// details of this operational intent when it was at a particular version does not need to retrieve
	// the details again until the version changes.
	Version OperationalIntentReferenceVersion `json:"version"`

	State OperationalIntentState `json:"state"`

	// Opaque version number of this operational intent.  Populated only when the OperationalIntentReference
	// is managed by the USS retrieving or providing it.  Not populated when the
	// OperationalIntentReference is not managed by the USS retrieving or providing it (instead, the
	// USS must obtain the OVN from the details retrieved from the managing USS).
	Ovn *EntityOVN `json:"ovn"`

	// Beginning time of operational intent.
	TimeStart Time `json:"time_start"`

	// End time of operational intent.
	TimeEnd Time `json:"time_end"`

	UssBaseUrl OperationalIntentUssBaseURL `json:"uss_base_url"`

	// The ID of the subscription that is ensuring the operational intent manager receives relevant
	// airspace updates.
	SubscriptionId SubscriptionID `json:"subscription_id"`
}

// The base URL of a USS implementation that implements the parts of the USS-USS API necessary for
// providing the details of this operational intent, and telemetry during non-conformance or contingency,
// if applicable.
type OperationalIntentUssBaseURL UssBaseURL

// Parameters for a request to create an OperationalIntentReference in the DSS.
// A subscription to changes overlapping this volume may be implicitly created, but
// this can be overridden by providing the (optional) 'subscription_id' to use.
// Note: The implicit subscription is managed by the DSS, not the USS.
type PutOperationalIntentReferenceParameters struct {
	// Spacetime extents that bound this operational intent.
	//
	// Start and end times, as well as lower and upper altitudes, are required for each
	// volume. The end time may not be in the past. All volumes, both nominal and off-nominal,
	// must be encompassed in these extents. However, these extents do not need to match the
	// precise volumes of the operational intent; a single bounding extent may be provided
	// instead, for instance.
	Extents []Volume4D `json:"extents"`

	// Proof that the USS creating or mutating this operational intent was aware of the current state of the
	// airspace, with the expectation that this operational intent is therefore deconflicted from all relevant
	// features in the airspace.  This field is not required when declaring an operational intent Nonconforming
	// or Contingent, or when there are no relevant Entities in the airspace, but is otherwise required.
	// OVNs for constraints are required if and only if the USS managing this operational intent is performing
	// the constraint processing role, which is indicated by whether the subscription associated with this
	// operational intent triggers notifications for constraints.  The key does not need to contain the OVN for
	// the operational intent being updated.
	Key *Key `json:"key"`

	State OperationalIntentState `json:"state"`

	UssBaseUrl OperationalIntentUssBaseURL `json:"uss_base_url"`

	// The ID of an existing subscription that the USS will use to keep the operator informed about
	// updates to relevant airspace information.  If this field is not provided, then the
	// `new_subscription` field must be provided in order to provide notification capability
	// for the operational intent.  The subscription specified by this ID must cover at least the area over
	// which this operational intent is conducted, and it must provide notifications for operational intents.
	SubscriptionId *EntityID `json:"subscription_id"`

	// If an existing subscription is not specified in `subscription_id`, then this field must be
	// populated.  When this field is populated, an implicit subscription will be created and
	// associated with this operational intent, and will generally be deleted automatically upon the
	// deletion of this operational intent.
	NewSubscription *ImplicitSubscriptionParameters `json:"new_subscription"`
}

// Information necessary to create a subscription to serve a single operational intent's notification needs.
type ImplicitSubscriptionParameters struct {
	// The base URL of a USS implementation of the parts of the USS-USS API necessary for
	// receiving the notifications that the operational intent must be aware of.  This includes, at least,
	// notifications for relevant changes in operational intents.
	UssBaseUrl SubscriptionUssBaseURL `json:"uss_base_url"`

	// True if this operational intent's subscription should trigger notifications when constraints change.
	// Otherwise, changes in constraints should not trigger notifications.  The scope
	// utm.constraint_processing is required to set this flag true, and a USS performing the constraint
	// processing role should set this flag true.
	NotifyForConstraints *bool `json:"notify_for_constraints"`
}

// Response to DSS request for the OperationalIntentReference with the given ID.
type GetOperationalIntentReferenceResponse struct {
	OperationalIntentReference OperationalIntentReference `json:"operational_intent_reference"`
}

// Response to a request to create, update, or delete an OperationalIntentReference
// in the DSS.
type ChangeOperationalIntentReferenceResponse struct {
	// DSS subscribers that this client now has the obligation to
	// notify of the operational intent changes just made.  This client must call POST
	// for each provided URL according to the USS-USS `/uss/v1/operational_intents`
	// path API.  The client's own subscriptions will also be included in this list.
	Subscribers []SubscriberToNotify `json:"subscribers"`

	OperationalIntentReference OperationalIntentReference `json:"operational_intent_reference"`
}

// Parameters for a request to find OperationalIntentReferences matching the provided criteria.
type QueryOperationalIntentReferenceParameters struct {
	AreaOfInterest *Volume4D `json:"area_of_interest"`
}

// Response to DSS query for OperationalIntentReferences in an area of interest.
type QueryOperationalIntentReferenceResponse struct {
	// OperationalIntentReferences in the area of interest.
	OperationalIntentReferences []OperationalIntentReference `json:"operational_intent_references"`
}

// Numeric version of this constraint which increments upon each change in the constraint,
// regardless of whether any field of the constraint reference changes.  A USS with the
// details of this constraint when it was at a particular version does not need to retrieve
// the details again until the version changes.
type ConstraintReferenceVersion int32

// A ConstraintReference (area in which a constraint is present, along with other high-level information, but no details).  The DSS reports only these references and clients must exchange details and additional information peer-to-peer.
type ConstraintReference struct {
	Id EntityID `json:"id"`

	// Created by the DSS based on creating client's ID (via access token).  Used internal
	// to the DSS for restricting mutation and deletion operations to manager.  Used by USSs
	// to reject constraint update notifications originating from a USS that does not manage
	// the constraint.
	Manager string `json:"manager"`

	UssAvailability UssAvailabilityState `json:"uss_availability"`

	// Numeric version of this constraint which increments upon each change in the constraint,
	// regardless of whether any field of the constraint reference changes.  A USS with the
	// details of this constraint when it was at a particular version does not need to retrieve
	// the details again until the version changes.
	Version ConstraintReferenceVersion `json:"version"`

	// Opaque version number of this constraint.  Populated only when the ConstraintReference
	// is managed by the USS retrieving or providing it.  Not populated when the
	// ConstraintReference is not managed by the USS retrieving or providing it (instead, the
	// USS must obtain the OVN from the details retrieved from the managing USS).
	Ovn *EntityOVN `json:"ovn"`

	TimeStart Time `json:"time_start"`

	TimeEnd Time `json:"time_end"`

	UssBaseUrl ConstraintUssBaseURL `json:"uss_base_url"`
}

// The base URL of a USS implementation that implements the parts of the USS-USS API necessary for
// providing the details of this constraint.
type ConstraintUssBaseURL UssBaseURL

// Parameters for a request to create/update a ConstraintReference in the DSS.
type PutConstraintReferenceParameters struct {
	// Spacetime extents that bound this constraint.
	//
	// The end time may not be in the past.
	//
	// All volumes of the constraint must be encompassed in these extents.
	// However, these extents do not need to match the precise volumes of
	// the constraint; a single bounding extent may be provided instead,
	// for instance.
	Extents []Volume4D `json:"extents"`

	UssBaseUrl ConstraintUssBaseURL `json:"uss_base_url"`
}

// Response to DSS request for the ConstraintReference with the given ID.
type GetConstraintReferenceResponse struct {
	ConstraintReference ConstraintReference `json:"constraint_reference"`
}

// Response to a request to create, update, or delete a ConstraintReference. in the DSS.
type ChangeConstraintReferenceResponse struct {
	// DSS subscribers that this client now has the obligation to notify of the constraint changes just made.  This client must call POST for each provided URL according to the USS-USS `/uss/v1/constraints` path API.  The client's own subscriptions will also be included in this list.
	Subscribers []SubscriberToNotify `json:"subscribers"`

	ConstraintReference *ConstraintReference `json:"constraint_reference"`
}

// Parameters for a request to find ConstraintReferences matching the provided criteria.
type QueryConstraintReferenceParameters struct {
	AreaOfInterest *Volume4D `json:"area_of_interest"`
}

// Response to DSS query for ConstraintReferences in an area of interest.
type QueryConstraintReferencesResponse struct {
	// ConstraintReferences in the area of interest.
	ConstraintReferences []ConstraintReference `json:"constraint_references"`
}

// Data provided when an airspace conflict was encountered.
type AirspaceConflictResponse struct {
	// Human-readable message indicating what error occurred and/or why.
	Message *string `json:"message"`

	// List of operational intent references for which current proof of knowledge was not provided.  If this field is present and contains elements, the calling USS should query the details URLs for these operational intents to obtain their details and correct OVNs.  The OVNs can be used to update the key, at which point the USS may retry this call.
	MissingOperationalIntents *[]OperationalIntentReference `json:"missing_operational_intents"`

	// List of constraint references for which current proof of knowledge was not provided.  If this field is present and contains elements, the calling USS should query the details URLs for these constraints to obtain their details and correct OVNs.  The OVNs can be used to update the key, at which point the USS may retry this call.
	MissingConstraints *[]ConstraintReference `json:"missing_constraints"`
}

// Details of a UTM operational intent. Note that this data is not stored in the DSS; only with the clients.
type OperationalIntentDetails struct {
	// Volumes that wholly contain the operational intent while being as small as practical.
	//
	// Start and end times, as well as lower and upper altitudes, are required for each
	// volume. The end time may not be in the past.
	//
	// Required with at least one item when the operational intent is Accepted, Activated, or Nonconforming.
	//
	// May not contain any items when the operational intent is Contingent.
	Volumes *[]Volume4D `json:"volumes"`

	// Volumes that contain the anticipated area of non-conformance while the aircraft is in the Nonconforming
	// or Contingent states.
	//
	// Start and end times, as well as lower and upper altitudes, are required for each
	// volume. The end time may not be in the past.
	//
	// Required with at least one item when the operational intent is Nonconforming or Contingent.
	//
	// May not contain any items when the operational intent is Accepted or Activated.
	OffNominalVolumes *[]Volume4D `json:"off_nominal_volumes"`

	Priority *Priority `json:"priority"`
}

// Ordinal priority of the operational intent, as defined by the regulator.  Operational intents with lesser
// values are lower priority than all operational intents with greater values.  A lower-priority
// operational intent may not create a conflict with a higher-priority operational intent.  A higher-priority
// operational intent may create a conflict with a lower-priority operational intent.  The regulator specifies
// whether an operational intent may create a conflict with other operational intents of the same priority.
type Priority float32

// Full description of a UTM operational intent.
type OperationalIntent struct {
	Reference OperationalIntentReference `json:"reference"`

	Details OperationalIntentDetails `json:"details"`
}

// Parameters of a message informing of detailed information for a peer operational intent.
// Pushed (by a client, not the DSS) directly to clients with subscriptions when
// another client makes a change to airspace within a cell with a subscription.
type PutOperationalIntentDetailsParameters struct {
	// ID of operational intent that has changed.
	OperationalIntentId EntityID `json:"operational_intent_id"`

	// Full information about the operational intent that has changed.  If this field is omitted,
	// the operational intent was deleted.  The `ovn` field in the nested `reference` must be
	// populated.
	OperationalIntent *OperationalIntent `json:"operational_intent"`

	// Subscription(s) prompting this notification.
	Subscriptions []SubscriptionState `json:"subscriptions"`
}

// Response to peer request for the details of operational intent with the given ID.
type GetOperationalIntentDetailsResponse struct {
	OperationalIntent OperationalIntent `json:"operational_intent"`
}

// Details of a UTM constraint. Note that this data is not stored in the DSS; only with the clients.
type ConstraintDetails struct {
	// Volumes that wholly contain the constraint while being as small as practical.
	//
	// The end time may not be in the past.
	Volumes []Volume4D `json:"volumes"`

	// Type of airspace feature this constraint represents.
	Type *string `json:"type"`

	// If this constraint is an ED-269 compliant geo zone, the details about that geo zone.
	Geozone *GeoZone `json:"geozone"`
}

// Full specification of a UTM constraint.
type Constraint struct {
	Reference ConstraintReference `json:"reference"`

	Details ConstraintDetails `json:"details"`
}

// Parameters of a message informing of new full information for a constraint.  Pushed (by a client, not the DSS) directly to clients with subscriptions when another client makes a change to airspace within a cell with a subscription.
type PutConstraintDetailsParameters struct {
	// ID of constraint that has changed.
	ConstraintId EntityID `json:"constraint_id"`

	// Full information about the constraint that has changed.  If this field is omitted,
	// the constraint was deleted.  The `ovn` field in the nested `reference` must be
	// populated.
	Constraint *Constraint `json:"constraint"`

	// Subscription(s) prompting this notification.
	Subscriptions []SubscriptionState `json:"subscriptions"`
}

// Response to peer request for the details of operational intent with the given ID.
type GetConstraintDetailsResponse struct {
	Constraint Constraint `json:"constraint"`
}

// Response to a peer request for telemetry of an off-nominal operational intent.
type GetOperationalIntentTelemetryResponse struct {
	// ID of the operational intent which the vehicle reporting telemetry is flying.
	OperationalIntentId EntityID `json:"operational_intent_id"`

	Telemetry *VehicleTelemetry `json:"telemetry"`

	// The next telemetry similar to this telemetry is not expected to be
	// available until at or after this time, so the polling USS should
	// generally not poll the endpoint providing this response data again
	// until at or after that time.  If this field is omitted, then there
	// is no current expectation of new telemetry becoming available.
	NextTelemetryOpportunity *Time `json:"next_telemetry_opportunity"`
}

// Vehicle position, altitude, and velocity.
type VehicleTelemetry struct {
	TimeMeasured Time `json:"time_measured"`

	Position *Position `json:"position"`

	Velocity *Velocity `json:"velocity"`
}

// Vertical error that is likely to be present in this reported position.
// This is the GVA enumeration from ADS-B, plus some finer values for UAS.
type PositionAccuracyVertical string

const (
	PositionAccuracyVertical_VAUnknown  PositionAccuracyVertical = "VAUnknown"
	PositionAccuracyVertical_VA150mPlus PositionAccuracyVertical = "VA150mPlus"
	PositionAccuracyVertical_VA150m     PositionAccuracyVertical = "VA150m"
	PositionAccuracyVertical_VA45m      PositionAccuracyVertical = "VA45m"
	PositionAccuracyVertical_VA25m      PositionAccuracyVertical = "VA25m"
	PositionAccuracyVertical_VA10m      PositionAccuracyVertical = "VA10m"
	PositionAccuracyVertical_VA3m       PositionAccuracyVertical = "VA3m"
	PositionAccuracyVertical_VA1m       PositionAccuracyVertical = "VA1m"
)

// Horizontal error that is likely to be present in this reported position.
// This is the NACp enumeration from ADS-B, plus 1m for a more complete range for UAS.
type PositionAccuracyHorizontal string

const (
	PositionAccuracyHorizontal_HAUnknown  PositionAccuracyHorizontal = "HAUnknown"
	PositionAccuracyHorizontal_HA10NMPlus PositionAccuracyHorizontal = "HA10NMPlus"
	PositionAccuracyHorizontal_HA10NM     PositionAccuracyHorizontal = "HA10NM"
	PositionAccuracyHorizontal_HA4NM      PositionAccuracyHorizontal = "HA4NM"
	PositionAccuracyHorizontal_HA2NM      PositionAccuracyHorizontal = "HA2NM"
	PositionAccuracyHorizontal_HA1NM      PositionAccuracyHorizontal = "HA1NM"
	PositionAccuracyHorizontal_HA05NM     PositionAccuracyHorizontal = "HA05NM"
	PositionAccuracyHorizontal_HA03NM     PositionAccuracyHorizontal = "HA03NM"
	PositionAccuracyHorizontal_HA01NM     PositionAccuracyHorizontal = "HA01NM"
	PositionAccuracyHorizontal_HA005NM    PositionAccuracyHorizontal = "HA005NM"
	PositionAccuracyHorizontal_HA30m      PositionAccuracyHorizontal = "HA30m"
	PositionAccuracyHorizontal_HA10m      PositionAccuracyHorizontal = "HA10m"
	PositionAccuracyHorizontal_HA3m       PositionAccuracyHorizontal = "HA3m"
	PositionAccuracyHorizontal_HA1m       PositionAccuracyHorizontal = "HA1m"
)

// Location of the vehicle (UAS) as reported for UTM.
// Note: 'accuracy' values are required when extrapolated field is true.
type Position struct {
	Longitude *Longitude `json:"longitude"`

	Latitude *Latitude `json:"latitude"`

	AccuracyH *PositionAccuracyHorizontal `json:"accuracy_h"`

	AccuracyV *PositionAccuracyVertical `json:"accuracy_v"`

	// True if this position was generated primarily by computation
	// rather than primarily from a direct instrument measurement.
	Extrapolated *bool `json:"extrapolated"`

	Altitude *Altitude `json:"altitude"`
}

// Ground speed in meters/second.
type VelocitySpeed float32

// Direction of flight expressed as a "True North-based" ground track angle.
// This value is provided in degrees East of North with a minimum resolution of 1 degree.
// A value of 360 indicates invalid, no value, or unknown.
type VelocityTrack float32

type Velocity struct {
	// Ground speed in meters/second.
	Speed VelocitySpeed `json:"speed"`

	UnitsSpeed string `json:"units_speed"`

	// Direction of flight expressed as a "True North-based" ground track angle.
	// This value is provided in degrees East of North with a minimum resolution of 1 degree.
	// A value of 360 indicates invalid, no value, or unknown.
	Track *VelocityTrack `json:"track"`
}

type UssAvailabilityStatus struct {
	// Client ID (matching their `sub` in access tokens) of the USS to which this availability applies.
	Uss string `json:"uss"`

	Availability UssAvailabilityState `json:"availability"`
}

// A USS is presumed to be in the Unknown state absent indication otherwise by a USS with
// availability arbitration scope.  Upon determination via availability arbitration, a USS is
// Down when it does not respond appropriately, and a Down USS may not perform the following
// operations in the DSS:
//
//   * Create an operational intent in the Accepted or Activated states
//   * Modify an operational intent whose new or unchanged state is Accepted or Activated
//   * Delete an operational intent
//
// A USS in the Unknown state possesses all the capabilities, within the DSS, of a USS in the
// Normal state.
type UssAvailabilityState string

const (
	UssAvailabilityState_Unknown UssAvailabilityState = "Unknown"
	UssAvailabilityState_Normal  UssAvailabilityState = "Normal"
	UssAvailabilityState_Down    UssAvailabilityState = "Down"
)

type SetUssAvailabilityStatusParameters struct {
	// Version of USS's availability to change, for consistent read-modify-write operations and consistent retry behavior.
	OldVersion string `json:"old_version"`

	Availability UssAvailabilityState `json:"availability"`
}

type UssAvailabilityStatusResponse struct {
	// Current version of USS's availability.  Used to change USS's availability.
	Version string `json:"version"`

	Status UssAvailabilityStatus `json:"status"`
}

// The set of log data fulfilling this standard's Logging requirements.
type USSLogSet struct {
	// Outgoing messages sent to other USSs and the DSS, and incoming messages received from other USSs, including instances where an expected response to a request is not received.
	Messages *[]ExchangeRecord `json:"messages"`

	// Instances of operator notifications as specifically required within this standard.
	OperatorNotifications *[]UserNotificationRecord `json:"operator_notifications"`

	// Instances of operator input as specifically required within this standard.
	OperatorInputs *[]UserInputRecord `json:"operator_inputs"`

	// For a USS that manages operational intents, associations of an operator with operational intents that transitioned to the Accepted state.
	OperatorAssociations *[]OperatorAssociation `json:"operator_associations"`

	// For a USS that manages operational intents, instances where an operational intent could not be planned or replanned due to conflicts with other operational intents or constraints.
	PlanningAttempts *[]PlanningRecord `json:"planning_attempts"`

	// For a USS performing conformance monitoring, all position data used for conformance monitoring that is ingested from the UA.
	OperationalIntentPositions *[]OperationalIntentPositions `json:"operational_intent_positions"`

	// For a USS that performs constraint management, associations of an authorized constraint provider with all constraints that transition to the valid state.
	ConstraintProviderAssociations *[]ConstraintProviderAssociation `json:"constraint_provider_associations"`
}

// HTTP response code sent/received in response to request.
type ExchangeRecordResponseCode int32

// Details of a request/response data exchange.
type ExchangeRecord struct {
	// Full URL of request.
	Url string `json:"url"`

	// HTTP verb used by requestor (e.g., "PUT," "GET," etc.).
	Method string `json:"method"`

	// Set of headers associated with request or response. Requires 'Authorization:' field (at a minimum)
	Headers *[]string `json:"headers"`

	// A coded value that indicates the role of the logging USS: 'Client' (initiating a request to a remote USS) or 'Server' (handling a request from a remote USS)
	RecorderRole string `json:"recorder_role"`

	// The time at which the request was sent/received.
	RequestTime Time `json:"request_time"`

	// Base64-encoded body content sent/received as a request.
	RequestBody *string `json:"request_body"`

	// The time at which the response was sent/received.
	ResponseTime *Time `json:"response_time"`

	// Base64-encoded body content sent/received in response to request.
	ResponseBody *string `json:"response_body"`

	// HTTP response code sent/received in response to request.
	ResponseCode *ExchangeRecordResponseCode `json:"response_code"`

	// Human-readable description of the problem with the exchange, if any.
	Problem *string `json:"problem"`
}

// A report informing a server of a communication problem.
type ErrorReport struct {
	// ID assigned by the server receiving the report.  Not populated when submitting a report.
	ReportId *string `json:"report_id"`

	// The request (by this USS) and response associated with the error.
	Exchange ExchangeRecord `json:"exchange"`
}

// A record of vehicle telemetry information received by this USS (typically for conformance monitoring).
type PositionRecord struct {
	// Time that this position data was received by the USS
	TimeReceived Time `json:"time_received"`

	Telemetry VehicleTelemetry `json:"telemetry"`
}

// A record of position data gathered through the course of an operational
// intent
type OperationalIntentPositions struct {
	Positions *[]PositionRecord `json:"positions"`

	// ID of the operational intent associated with `positions`
	OperationalIntentId EntityID `json:"operational_intent_id"`
}

// A record of a single attempt to (successfully or unsuccessfully) create or modify an operational intent.
type PlanningRecord struct {
	// Time that this planning event occurred
	Time Time `json:"time"`

	// OVNs the planning USS was aware of when it was planning the operational intent
	Ovns []EntityOVN `json:"ovns"`

	// List of missing operational intents (for planning attempts that were denied by the DSS with code 409)
	MissingOperationalIntents *[]EntityID `json:"missing_operational_intents"`

	// List of missing constraints (for planning attempts that were denied by the DSS with code 409)
	MissingConstraints *[]EntityID `json:"missing_constraints"`

	// ID of the operational intent being planned
	OperationalIntentId *EntityID `json:"operational_intent_id"`

	// A free text description of the problem(s) encountered during this planning attempt.
	Problem *string `json:"problem"`
}

// User notification record.
type UserNotificationRecord struct {
	// Time of the notification triggering event
	TriggeringEventTime Time `json:"triggering_event_time"`

	// Time at which the user was notified
	NotificationTime Time `json:"notification_time"`

	// Description of information that was provided to the user, as per the referenced notification_triggering_event requirement
	NotificationDetails *string `json:"notification_details"`

	// Requirement ID that pertains to the given notification
	NotificationTriggeringEvent string `json:"notification_triggering_event"`
}

// User input record
type UserInputRecord struct {
	// Time in which user input was received by the USS
	TriggeringEventTime Time `json:"triggering_event_time"`

	// ID of the operational_intent ID pertaining to the user input
	OperationalIntentId EntityID `json:"operational_intent_id"`

	// Requirement ID that pertains to the given notification
	InputTriggeringEvent string `json:"input_triggering_event"`

	// Description of the information that was provided by the user, as per the referenced input_triggering_event requirement
	InputDetails *string `json:"input_details"`
}

// Association between an operational intent and the operator of that operational intent
type OperatorAssociation struct {
	// ID of operational intent to which this association pertains
	OperationalIntentId EntityID `json:"operational_intent_id"`

	// Unique identifier of the operator responsible for the operational intent
	OperatorId string `json:"operator_id"`
}

// Association between a constraint and the constraint provider responsible for that constraint
type ConstraintProviderAssociation struct {
	// ID of constraint to which this association pertains
	ConstraintId EntityID `json:"constraint_id"`

	// Unique identifier of the constraint provider responsible for the constraint
	ConstraintProviderId string `json:"constraint_provider_id"`
}

// Where applicable, identifies a region inside a State where the UAS Zone is located.
//
// Note 1) identified with a digit between 0-65535 (16 bit), corresponding to a list of regions pre-defined for
// each State.
//
// Note 2) this attribute is intended to facilitate extracting sub-sets of data, for specific regions
type GeoZoneRegion int32

// Indicates that exemptions from the national or European regulations are allowed in the UAS Zone, that
// will be detailed via the "message" property.
type GeoZoneAdditionalProperties struct{}

// An airspace of defined dimensions, above the land areas or territorial waters of a
// State, within which a particular restriction or condition for UAS flights applies.
type GeoZone struct {
	// A string of characters that uniquely identifies the UAS Zone within the State/Territory identified by the
	// country attribute.
	//
	// Note - The UAS Zone is uniquely identified worldwide by the combination of the country and the
	// identifier attributes
	Identifier CodeZoneIdentifierType `json:"identifier"`

	// The State that has the authority to declare the zone.
	//
	// Note - There will be no Zone belonging to two States. Not necessary to code the information that two
	// zones are "in neighboring States" or "related".
	Country CodeCountryISOType `json:"country"`

	ZoneAuthority []Authority `json:"zone_authority"`

	// A free text name by which the zone may be known by the public or by the UAS community.
	Name *TextShortType `json:"name"`

	// An indication whether the Zone is provided with its common definition or with a customised definition,
	// for a particular user.
	Type CodeZoneType `json:"type"`

	// An indication if flying in the zone is conditional, forbidden or unrestricted.
	Restriction CodeRestrictionType `json:"restriction"`

	// An indication of the conditions under which the zone can be used
	RestrictionConditions *[]ConditionExpressionType `json:"restriction_conditions"`

	// Where applicable, identifies a region inside a State where the UAS Zone is located.
	//
	// Note 1) identified with a digit between 0-65535 (16 bit), corresponding to a list of regions pre-defined for
	// each State.
	//
	// Note 2) this attribute is intended to facilitate extracting sub-sets of data, for specific regions
	Region *GeoZoneRegion `json:"region"`

	// A coded indication for the reason that led to the establishment of the zone.
	Reason *[]CodeZoneReasonType `json:"reason"`

	// A free text description of the reason that led to the establishment of the zone, when not covered by a
	// pre-defined coded value.
	OtherReasonInfo *string `json:"other_reason_info"`

	// This is an extension point. It allows adding additional attributes of national interest through this element.
	RegulationExemption *CodeYesNoType `json:"regulation_exemption"`

	// A code that identifies the category or class of the zone applying a "USpace concept".
	//
	// Note: Two (draft) classifications exist, one from Eurocontrol and one from CORUS. Therefore, two
	// instances of this attribute are expected, one from each sub-list. This might be later replaced with
	// separate attributes and separate lists of values.
	USpaceClass *CodeUSpaceClassType `json:"u_space_class"`

	// A message to be displayed to the user of the zone, typically on the RPS for the Remote Pilot, to make
	// him/her aware about specific information associated with the zone (typically when it is not only a
	// restriction to fly in the zone, thus not only an alert or an automatic limitation, for example : “image capture
	// prohibited in this zone”, “frequent strong winds in this zone”, “no landing or take-off in this zone”). This
	// message is also used to indicate exemptions from regulation in a zone (see below). Several information
	// can be grouped in a message, separated by a “/”.
	Message *TextShortType `json:"message"`

	// Indicates that exemptions from the national or European regulations are allowed in the UAS Zone, that
	// will be detailed via the "message" property.
	AdditionalProperties *GeoZoneAdditionalProperties `json:"additional_properties"`
}

// a string of maximum 7 characters that uniquely identifies the area within
// a geographical scope.
//
// NOTE (1): This shall not include the country identifier, which is a separate attribute of
// the UAS Zone.
//
// NOTE (2): The length of this data type is limited to 7 characters for compatibility with
// ARINC 424 and AIXM, where an airspace designator may have maximum
// 10 characters. The 10 characters are the result of concatenating the UAS
// Zone attributes for country and identifier.
type CodeZoneIdentifierType string

// A 3 letter identifier of a country or territory using the ISO 3166-1 alpha-3 standard.
//
// NOTE: The ISO 3-letter country codes come with the following advantages:
//       - allow to distinguish between remote territories and mainland
//       - are unique, unlike the ICAO Country codes where the same State
//         could have two or more codes
//       - are also used in military standards, such as NATO STANAG 1059
//         INT, which come with well document additions that might be also
//         useful for UAS areas.
type CodeCountryISOType string

// A coded list of values which allows indicating that the definition of a UAS Zone is
// specifically customised for a particular UAS or operator.
type CodeZoneType string

const (
	CodeZoneType_COMMON            CodeZoneType = "COMMON"
	CodeZoneType_CUSTOMIZED        CodeZoneType = "CUSTOMIZED"
	CodeZoneType_PROHIBITED        CodeZoneType = "PROHIBITED"
	CodeZoneType_REQ_AUTHORISATION CodeZoneType = "REQ_AUTHORISATION"
	CodeZoneType_CONDITIONAL       CodeZoneType = "CONDITIONAL"
	CodeZoneType_NO_RESTRICTION    CodeZoneType = "NO_RESTRICTION"
)

// A coded expression that provides information about what is authorised / forbidden in a
// zone that has conditional access.
//
// By difference with the “Message” field per zone, this coded expression is made to be
// interopreted by the UAS while the “Message” is to interpreted by the remote pilot.
//
// NOTE: the maximum field length is 10 000 characters.
//
// ---------------------- Condition definition language ----------------
// • A list of relevant characteristics (CHARTYPE) has first to be established per state,
// and their finite list of acceptable values (CHARVAL)
// • Each chartype and charval fields are defined by a limited set of characters
// • A public document shall give the definitions of each, and provide the reference to
// legal or technical characteristics implied
// • The Geozone editor per state can use these characteristics, with the dedicated
// condition language defined below, to define exact conditions per zone
// • Each UAS Geofencing function shall be loaded with the corresponding
// chararacteristic status of the UAS for the intended flight, so as to be able to apply
// the conditions , either to generate alerts or to limit the flight
// • If the value of a given characteristic of the condition equation is not defined in
// the UAS, the UAS Geofencing function should inform the pilot in Geoawareness
// alerting or consider that the zone is forbidden, by default in automatic
// Geofencing.
//
// A conditional expression shall be of the following type:
// • The UAS is PERMITTED XOR PROHIBITED (exclusive choice) to fly in this zone
// at this time IF (Characteristic1) CHARTYPE1 = (Value1) CHARVAL1 AND
// CHARTYPE 2 = CHARVAL 2 AND ... AND End IF
// OR (...)
// ...
// End OR
//
// • Only the fields in bold need to be edited in the character string, separated by”/”.
// Others are implicit.
//
// Examples of CHARTYPE and CHARVALUE:
// • CHARTYPE: operator type; Acceptable CHARVAL values:
//   Military/Police/Firefighting
// • CHARTYPE: Operator ID (registration number); Acceptable CHARVAL values:
//   as per registration format
// • CHARTYPE: Operation type: A1 as per EASA Open Types or S1 (National
//   standard Scenario 1), STS01 (EASA Specific standard scenario) or ...
// • CHARTYPE: UTM operation type: Planned/Unplanned,
// • CHARTYPE: passengers on board: yes /no
//   Note that it is possible in each national catalog of chartype and charval items, to define
// complex categories of operation/drone /equipment. Example: In nation A, we may have
//   a type “drone level” with values Low, Medium, High. Each level corresponds to a defined
//   set of required UAS performance/operation features/ operator qualification etc. This
//   avoids to code a complex combination in the geozone database.
//   This conditional expression can also be used to code a prohibition of image capture in
//   a zone.
// Example: PERMITTED/IMAGE CAPTURE=NO/NOISE
//   CLASS=A/OR/OPERATOR=POLICE
// Meaning: the fight is permitted in this zone at that time if No image is captured
//   (removed or deactivated) and if noise class = class A (following a known classification)
//   or if the UAS operator is the Police
type ConditionExpressionType string

// An indication if flying in the zone is conditional, forbidden or unrestricted.
type CodeRestrictionType string

// A coded indication of a reason that justifies the existence of an UAS Zone
type CodeZoneReasonType string

const (
	CodeZoneReasonType_AIR_TRAFFIC       CodeZoneReasonType = "AIR_TRAFFIC"
	CodeZoneReasonType_SENSITIVE         CodeZoneReasonType = "SENSITIVE"
	CodeZoneReasonType_PRIVACY           CodeZoneReasonType = "PRIVACY"
	CodeZoneReasonType_POPULATION        CodeZoneReasonType = "POPULATION"
	CodeZoneReasonType_NATURE            CodeZoneReasonType = "NATURE"
	CodeZoneReasonType_NOISE             CodeZoneReasonType = "NOISE"
	CodeZoneReasonType_FOREIGN_TERRITORY CodeZoneReasonType = "FOREIGN_TERRITORY"
	CodeZoneReasonType_EMERGENCY         CodeZoneReasonType = "EMERGENCY"
	CodeZoneReasonType_OTHER             CodeZoneReasonType = "OTHER"
)

// A coded identifier for a category or class of the zone applying a "USpace concept".
//
// NOTE: In the current model version, there is no specific list of values. For example,
// the “X”, “Y”, “Z” types of zones as per SESAR JU Corus project on USpace
// concept of operation could be used in a future version. Until a precise list
// of values is defined, this data type will be considered as string of characters
// of maximum 100 characters.
type CodeUSpaceClassType string

// A coded value that indicates a choice between a positive (yes) or a negative (no)
// applicability.
type CodeYesNoType string

const (
	CodeYesNoType_True  CodeYesNoType = "True"
	CodeYesNoType_False CodeYesNoType = "False"
)

// A relevant authority that is in charge for authorising, being notified or providing
// information for UAS operations in the UAS zone.
//
// Rule: at least one of the following shall be specified - siteURL, email, phone.
type Authority struct {
	// The official name of a public or private authority
	Name *TextShortType `json:"name"`

	// The name of a specific department or service within the organisation
	Service *TextShortType `json:"service"`

	// The name or role of a specific person that needs to be contacted within the organisation
	ContactName *TextShortType `json:"contact_name"`

	// The URL of the public internet site through which the organisation may be contacted
	//
	// Note: in the data coding format, this might be further constrained in order to ensure a valid URL format.
	SiteUrl *TextShortType `json:"site_url"`

	// The e-mail address by which the organisation may be contacted.
	//
	// Note: in the data coding format, this might be further constrained in order to ensure a valid e-mail
	// format.
	Email *TextShortType `json:"email"`

	// A phone number at which the organisation may be contacted
	Phone *TextShortType `json:"phone"`

	// The role of the Authority in relation with the zone.
	Purpose *CodeAuthorityRole `json:"purpose"`

	// The minimal time interval required between notification or authorization request and starting to operate
	// in the zone, in the format PnnDTnnHnnM (ISO 8601).
	IntervalBefore *string `json:"interval_before"`
}

// A coded list of values indicating the role that an authority has in relation with the UAS
// zone.
type CodeAuthorityRole string

const (
	CodeAuthorityRole_AUTHORIZATION CodeAuthorityRole = "AUTHORIZATION"
	CodeAuthorityRole_NOTIFICATION  CodeAuthorityRole = "NOTIFICATION"
	CodeAuthorityRole_INFORMATION   CodeAuthorityRole = "INFORMATION"
)

// A free text with a maximum length of 200 characters
type TextShortType string
