---
openapi: "3.0.3"
info:
  title: "SCD Qualifier Injection API"
  description: |-
    This interface is implemented by USS wishing to be tested by the Flight Authorization testing suite. The automated testing suite calls this interface to inject flight-related test data into the USS system under test. 

    Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.
  version: "0.0.1"

security:
  - TestAuthority:
      - utm.strategic_coordination
      - scd.inject_test_data

tags:
  - name: Strategic Deconfliction
    description: |-
      Endpoints exposed by the USS for interaction with strategic deconfliction test suite (`scd_qualifier`)

components:
  securitySchemes:
    Authority:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://auth.example.com/oauth/token
          scopes:
            utm.strategic_coordination: >-
              Client may perform actions encompassed by the strategic
              coordination role including strategic conflict detection.

      description: >-
        Authorization from, or on behalf of, an authorization authority.  This
        authority will issue access tokens that are JSON Web Tokens as defined
        in RFC 7519, using the `RS256` algorithm for the signature, publish to
        all providers the public key for verifying that signature, and implement
        standard OAuth server discovery mechanisms as described in RFC 8414.
        The following fields must be included in the JWT claim for access tokens
        issued by this authority:
        * `iss`, with the URL at which the token generation request was
        received.
        * `exp`, with a time no further than 1 hour in the future.
        * `sub`, with unique ID of the client requesting the access token.
        * `scope`, with a string composed of a space-separated list of strings
        indicating the scopes granted, per RFC 6749.
        * `jti`, according to RFC 7519.
        Following the principle of least privilege, only one of the scopes
        enumerated in this document should be granted in a single token (though
        other scopes may accompany it).  The tokens granted by this authority
        must protect against reuse of received tokens to impersonate the sender
        to other recipients (via use of the `aud` claim or other means).
        When using the `aud` claim to protect against the reuse of received
        tokens, and absent guidance on behalf of the competent authority to the
        contrary, the JWT `aud` claim requested by the client must be included
        in each access token and must contain the fully qualified domain name of
        the URL the access token will be used to access.  For example, if a USS
        were querying the endpoint at
        https://dss.example.com:8888/rid/v2/dss/identification_service_areas,
        the access token included in the request should specify `"aud":
        "dss.example.com"`.
        Clients must provide these access tokens in an `Authorization` header in
        the form `Bearer <token>` in accordance with RFC 6750.
  schemas:
    UUIDv4Format:
      description: >-
        String whose format matches a version-4 UUID according to RFC 4122.
      maxLength: 36
      minLength: 36
      type: string
      format: uuid
      pattern: >-
        ^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-4[0-9a-fA-F]{3}\\-[8-b][0-9a-fA-F]{3}\\-[0-9a-fA-F]{12}$
      example: 03e5572a-f733-49af-bc14-8a18bd53ee39
    EntityID:
      description: >-
        Identifier for an Entity communicated through the DSS.  Formatted as a
        UUIDv4.
      anyOf:
        - $ref: "#/components/schemas/UUIDv4Format"
      example: 2f8343be-6482-4d1b-a474-16847e01af1e
    Time:
      required:
        - value
        - format
      type: object
      properties:
        value:
          type: string
          description: >-
            RFC3339-formatted time/date string.  The time zone must be 'Z'.
          format: date-time
          example: "1985-04-12T23:20:50.52Z"
        format:
          type: string
          enum:
            - RFC3339

    Radius:
      required:
        - value
        - units
      type: object
      properties:
        value:
          format: float
          description: >-
            Distance from the centerpoint of a circular area, along the WGS84
            ellipsoid.
          type: number
          minimum: 0
          exclusiveMinimum: true
          example: 300.183
        units:
          type: string
          description: >-
            FIXM-compatible units.  Only meters ("M") are acceptable for UTM.
          enum:
            - M
    Altitude:
      type: object
      required:
        - value
        - reference
        - units
      properties:
        value:
          description: >-
            The numeric value of the altitude. Note that min and max values are
            added as a sanity check. As use cases evolve and more options are
            made available in terms of units of measure or reference systems,
            these bounds may be re-evaluated.
          type: number
          format: double
          minimum: -8000
          exclusiveMinimum: false
          maximum: 100000
          exclusiveMaximum: false
        reference:
          description: >-
            A code indicating the reference for a vertical distance. See AIXM
            5.1 and FIXM 4.2.0. Currently, UTM only allows WGS84 with no
            immediate plans to allow other options. FIXM and AIXM allow for
            'SFC' which is equivalent to AGL.
          type: string
          enum:
            - W84
        units:
          description: >-
            The reference quantities used to express the value of altitude. See
            FIXM 4.2. Currently, UTM only allows meters with no immediate plans
            to allow other options.
          type: string
          enum:
            - M
    Latitude:
      description: >-
        Degrees of latitude north of the equator, with reference to the WGS84
        ellipsoid.
      maximum: 90
      exclusiveMaximum: false
      minimum: -90
      exclusiveMinimum: false
      type: number
      format: double
      example: 34.123
    Longitude:
      description: >-
        Degrees of longitude east of the Prime Meridian, with reference to the
        WGS84 ellipsoid.
      minimum: -180
      exclusiveMaximum: false
      maximum: 180
      exclusiveMinimum: false
      type: number
      format: double
      example: -118.456
    Polygon:
      description: >-
        An enclosed area on the earth. The bounding edges of this polygon are
        defined to be the shortest paths between connected vertices.  This
        means, for instance, that the edge between two points both defined at a
        particular latitude is not generally contained at that latitude. The
        winding order must be interpreted as the order which produces the
        smaller area. The path between two vertices is defined to be the
        shortest possible path between those vertices. Edges may not cross.
        Vertices may not be duplicated.  In particular, the final polygon vertex
        must not be identical to the first vertex.
      required:
        - vertices
      type: object
      properties:
        vertices:
          minItems: 3
          type: array
          items:
            $ref: "#/components/schemas/LatLngPoint"
    LatLngPoint:
      description: Point on the earth's surface.
      required:
        - lat
        - lng
      type: object
      properties:
        lng:
          $ref: "#/components/schemas/Longitude"
        lat:
          $ref: "#/components/schemas/Latitude"
    Circle:
      description: A circular area on the surface of the earth.
      type: object
      properties:
        center:
          $ref: "#/components/schemas/LatLngPoint"
        radius:
          $ref: "#/components/schemas/Radius"
    Volume3D:
      description: >-
        A three-dimensional geographic volume consisting of a
        vertically-extruded shape. Exactly one outline must be specified.
      type: object
      properties:
        outline_circle:
          anyOf:
            - $ref: "#/components/schemas/Circle"
          description: A circular geographic shape on the surface of the earth.
        outline_polygon:
          anyOf:
            - $ref: "#/components/schemas/Polygon"
          description: >-
            A polygonal geographic shape on the surface of the earth.
        altitude_lower:
          description: >-
            Minimum bounding altitude of this volume. Must be less than
            altitude_upper, if specified.
          anyOf:
            - $ref: "#/components/schemas/Altitude"
        altitude_upper:
          description: >-
            Maximum bounding altitude of this volume. Must be greater than
            altitude_lower, if specified.
          anyOf:
            - $ref: "#/components/schemas/Altitude"
    Volume4D:
      description: Contiguous block of geographic spacetime.
      required:
        - volume
      type: object
      properties:
        volume:
          $ref: "#/components/schemas/Volume3D"
        time_start:
          description: Beginning time of this volume. Must be before time_end.
          anyOf:
            - $ref: "#/components/schemas/Time"
        time_end:
          description: End time of this volume. Must be after time_start.
          anyOf:
            - $ref: "#/components/schemas/Time"

    UssBaseURL:
      description: >-
        The base URL of a USS implementation of part or all of the USS-USS API.
        Per the USS-USS API, the full URL of a particular resource can be
        constructed by appending, e.g., `/uss/v1/{resource}/{id}` to this base
        URL. Accordingly, this URL may not have a trailing '/' character.
      type: string
      example: https://uss.example.com/utm

    UssAvailabilityState:
      type: string
      enum:
        - Unknown
        - Normal
        - Down
      description: >-
        A USS is presumed to be in the Unknown state absent indication otherwise
        by a USS with availability arbitration scope.  Upon determination via
        availability arbitration, a USS is Down when it does not respond
        appropriately, and a Down USS may not perform the following operations
        in the DSS:

        * Create an operational intent in the Accepted or Activated states

        * Modify an operational intent whose new or unchanged state is Accepted
        or Activated

        * Delete an operational intent

        A USS in the Unknown state possesses all the capabilities, within the
        DSS, of a USS in the Normal state.

    EntityOVN:
      title: EntityOVN
      description: >-
        A token associated with a particular UTM Entity+version created by the
        DSS upon creation or modification of an Entity reference and provided to
        the client creating or modifying the Entity reference.  The EntityOVN is
        stored privately by the DSS and then compared against entries in a Key
        provided to mutate the airspace.  The EntityOVN is also provided by the
        client whenever that client transmits the full information of the Entity
        (either via GET, or via a subscription notification).
      type: string
      minLength: 16
      maxLength: 128
      example: 9d158f59-80b7-4c11-9c0c-8a2b4d936b2d
    SubscriptionID:
      description: >-
        Identifier for a subscription communicated through the DSS.  Formatted
        as a UUIDv4.
      anyOf:
        - $ref: "#/components/schemas/UUIDv4Format"
      example: 78ea3fe8-71c2-4f5c-9b44-9c02f5563c6f


    OperationalIntentUssBaseURL:
      description: >-
        The base URL of a USS implementation that implements the parts of the
        USS-USS API necessary for providing the details of this operational
        intent, and telemetry during non-conformance or contingency, if
        applicable.
      anyOf:
        - $ref: "#/components/schemas/UssBaseURL"

    SubscriptionUssBaseURL:
      description: >-
        The base URL of a USS implementation of the parts of the USS-USS API
        necessary for receiving the notifications requested by this
        subscription.
      anyOf:
        - $ref: "#/components/schemas/UssBaseURL"

    #########
    # The definitions before this seperator are from the standard UTM API (https://github.com/astm-utm/Protocol/blob/master/utm.yaml), the definitions specific for the automated testing suite follow below.
    #########

    Volume4DTestInjection: 
        type: object
        properties:
          volume_4D:
              $ref: "#/components/schemas/Volume4D"
          injection_id:
            description: 'ID of the injected test flight.  Remains the same regardless of the flight ID/UTM ID reported in the system.'
            type: string
            example: 'edb7695f-8737-4b9f-91f8-e2afbb333f41'

    SCDCreateTestParameters: 
        type: object
        properties:
          areas_of_interest:
            description: A list of Volume 4D provided for the test, these have to be converted to Operational Intents by the USS and submited to the DSS
            type: array
            items:
              $ref: "#/components/schemas/Volume4DTestInjection"
         
    SCDCreateTestResponse:
      description: Response to a SCD qualification data processing request 
      type: object
      properties:
        test_id:
          description: ID provided when a test payload is submitted to the system under test
          type: string
          format: uuid
          example: a32db672-e968-42aa-9a99-49c583f94a98
        injected_areas_of_interest: 
          type: array
          items:
            $ref: "#/components/schemas/Volume4DTestInjection"
        processing_results: 
          type: array
          items:
            $ref: "#/components/schemas/SCDProcessingResults"

    FlightNotAuthorizedResult:
      type: object
      properties:
        scd_processing_result:
          type: string
          enum: ["OperationalConflict", "CouldNotProcess"]
          description: >
            Sort order:
              * `OperationalConflict` - The Flight not Authorized becuase of a conflict with another operation
              * `CouldNotProcesss` - The OperationalIntent could not be processed by the USSP, this might be because of a number of reasons e.g. the intent is so far in the future the USSP cannot process it.
        volume_4D:
          type: object
          $ref: "#/components/schemas/Volume4DTestInjection"
        
        injection_id:
          description: 'ID of the injected test flight.  Remains the same regardless of the flight ID/UTM ID reported in the system.'
          type: string
          example: 'edb7695f-8737-4b9f-91f8-e2afbb333f41'

    FlightAuthorizedResult:
      type: object
      properties:
        scd_processing_result:
          type: string
          enum: ["Success"]
          description: >
            Sort order:
              * `Success` - A operational intent was created with the supplied data and submitted to the successfully to the DSS
        volume_4D:
          type: object
          $ref: "#/components/schemas/Volume4DTestInjection"
        
        injection_id:
          description: 'ID of the injected test flight.  Remains the same regardless of the flight ID/UTM ID reported in the system.'
          type: string
          example: '76432bcf-be37-4da3-a9c1-3355bea565c5'

    SCDProcessingResults:
      description: Results for the operational intents submitted to the create test endpoint
      anyOf:
        - $ref: "#/components/schemas/FlightAuthorizedResult"
        - $ref: "#/components/schemas/FlightNotAuthorizedResult"

    QuerySCDParameters:
      description: |-
        Parameters for a request to find results of strategic de-confliction processing matching the provided criteria.
      type: object
      properties:
        area_of_interest:
          $ref: "#/components/schemas/Volume4D"

    DeleteTestResponse:
      description: ""
      required:
        - areas_of_interest
      type: object
      properties:
        areas_of_interest:
          description: "The complete set of test data deleted."
          type: array
          items:
            $ref: "#/components/schemas/Volume4DTestInjection"

paths:
  /scd_tests/{test_id}:
    parameters:
      - examples:
          default:
            value: "2979bd18-7f06-441c-bda6-e82c841c35d6"
        name: test_id
        description: >-
          The ID of the test.
        schema:
          type: string
        in: query
        required: true
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SCDCreateTestParameters"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SCDCreateTestResponse"
          description: Requested areas of interest were processed successfully.
        "409":
          description: Test already exists.
      operationId: createTest
      summary: Create a test
      description: >-
        Request the creation of one or more Operational Intents based on injection of the provided Volume 4D data.
        These fields may not be modified.
      security:
        - TestAuth:
            - scd.inject_test_data
      tags:
        - Strategic Deconfliction

  /scd_tests/{test_id}/{version}:
    parameters:
      - examples:
          default:
            value: "b8e57460-f72d-4a8c-bb4e-b5ce1f5009c4"
        name: test_id
        description: >-
          The ID of the test.
        schema:
          type: string
        in: query
        required: true
      - name: version
        description: >-
          Current version of the test.
        schema:
          type: string
        in: query
        required: true
    delete:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteTestResponse"
          description: Requested test was deleted successfully.
      operationId: deleteTest
      summary: Delete test
      description: Remove all injected test data associated with this test from the host Service Provider's system under test.
      security:
        - TestAuth:
            - scd.inject_test_data
      tags:
        - Strategic Deconfliction
