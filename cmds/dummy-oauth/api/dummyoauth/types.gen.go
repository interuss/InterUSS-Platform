// This file is auto-generated; do not change as any changes will be overwritten
package dummyoauth

type TokenRequestForm struct {
	// Type of grant. Must be 'client_credentials'.
	GrantType string `json:"grant_type"`

	// The client_id (uss_name) of the requesting USS.
	ClientID string `json:"client_id"`

	// The requested scope(s), a list of space-delimited,
	// case-sensitive names. Same as in RFC 6749.
	//
	Scope string `json:"scope"`

	// The hostname of the server with which the resulting access token will be used.
	// If valid, this resource value will be included in the access token as an aud claim.
	// Note the format of this field is a single hostname.  This authorization server does not produce of multi-audience tokens.
	// See https://tools.ietf.org/html/rfc7519#section-4.1.3 for more info on how the aud claim is to be used.
	//
	Audience string `json:"audience"`

	// A timestamp of the current time generated by the client at request
	// generation time. UTC only. UTM Commons format with millisecond precision.
	//
	// May be used by the authorization server to validate the request.
	//
	CurrentTimestamp string `json:"current_timestamp"`
}

type TokenResponse struct {
	// JWT that may be used as a Bearer token to authorize operations on an appropriately-configured DSS instance
	AccessToken string `json:"access_token"`
}

type BadRequestResponse struct {
	// Human-readable message describing problem with request
	Message *string `json:"message"`
}

type HTTPTokenResponse struct {
	AccessToken *string `json:"access_token"`

	// The granted scope(s), a list of space-delimited,
	// case-sensitive names. Same as in RFC 6749.
	//
	Scope *string `json:"scope"`

	TokenType *string `json:"token_type"`

	// see definitions/JwtClaimsSet.exp property in this spec
	ExpiresIn *int64 `json:"expires_in"`

	// see definitions/JwtClaimsSet in this spec
	Sub *string `json:"sub"`

	// see definitions/JwtClaimsSet in this spec
	Jti *string `json:"jti"`

	// see definitions/JwtClaimsSet in this spec
	Iss *string `json:"iss"`

	// see definitions/JwtClaimsSet in this spec
	Nbf *int64 `json:"nbf"`

	// see definitions/JwtClaimsSet in this spec
	Aud *string `json:"aud"`
}

// The JOSE (JSON Object Signing and Encryption) header of the JWS used in Message Signing. Refer to UFAA's section 5.12.1 for additional information.
type xUtmMessageSignatureJoseHeader struct {
	// The algorithm used to sign the JWS, which is required to be a  registered JSON Web Algorithm (JWA). See RFC 7518 for details on JWA.
	Alg *string `json:"alg"`

	// The type is used by JWS applications to declare the media type of  this complete JWS. In this case, it must be “JOSE” per ​RFC 7515​.
	Typ *string `json:"typ"`

	// The "x5u" (X.509 URL) Header Parameter is a URI [​RFC 3986]​ that  refers to a resource for the X.509 public key certificate or  certificate chain [​RFC 5280​] corresponding to the key used to  digitally sign the JWS.
	X5U *string `json:"x5u"`

	// The Key ID of the JWK used to sign. Note that the jku reference  will provide a set of keys with unique key identifiers. Those  identifiers will be searched to match against this kid.
	Kid *string `json:"kid"`
}

// The token provided by the FIMS Authorization Server is a JWS representing a JWT.  The token is actually a JWS Compact Serialization string as described in RFC 7515.  For clarity of documentation, we represent the pre-serialized components here as a JSON schema.
type JSONWebToken struct {
	Header *JwtHeader `json:"header"`

	Payload *JwtClaimsSet `json:"payload"`

	// See RFC 7515 for details.
	Signature *string `json:"signature"`
}

// The header of the JWT Bearer Token returned by FIMS-AZ.
type JwtHeader struct {
	Alg *string `json:"alg"`

	// The FIMS Authorization Server only support 'JWT' (JSON Web Token) as the algorithm type.
	Typ *string `json:"typ"`
}

// Claims included within JWT Bearer Token returned by FIMS-AZ.
type JwtClaimsSet struct {
	// The "iss" (issuer) claim identifies the principal that issued the JWT. The URL of the FIMS Authorization Server.
	Iss string `json:"iss"`

	// The "sub" (suv4-draft identifies the principal that is the subject of the JWT.
	Sub string `json:"sub"`

	// The "exp" (expiration time) claim identifies the expiration time on or after which the JWT MUST NOT be accepted for processing.  The processing of the "exp" claim requires that the current date/time MUST be before the expiration date/time listed in the "exp" claim.
	Exp float32 `json:"exp"`

	// The "nbf" (not before) claim identifies the time before which the JWT MUST NOT be accepted for processing.  The processing of the "nbf" claim requires that the current date/time MUST be after or equal to the not-before date/time listed in the "nbf" claim.
	Nbf float32 `json:"nbf"`

	// The "iat" (issued at) claim identifies the time at which the JWT was issued.  This claim can be used to determine the age of the JWT.
	Iat float32 `json:"iat"`

	// The "jti" (JWT ID) claim provides a unique identifier for the JWT. For this server, this is satisfied by the use of a UUID.
	Jti string `json:"jti"`

	// The granted scope(s), a list of space-delimited, case-sensitive names.
	//
	Scope string `json:"scope"`

	// The "aud" (audience) claim identifies the recipients that the JWT is
	// intended for.  Each server intended to process the JWT MUST
	// identify itself with a value in the audience claim.  If the server
	// processing the claim does not identify itself with a value in the
	// "aud" claim when this claim is present, then the JWT MUST be
	// rejected.  "aud" will contain exactly one identifier of
	// the intended recipient system.
	//
	Aud string `json:"aud"`

	// An array of all authorities that the client is associated with.
	Authorities *[]string `json:"authorities"`

	// The client_id (uss_name) of the requesting USS.
	ClientID *string `json:"client_id"`
}

// Information provided at the `/.well-known/oauth-authorization-server` endpoint.
type Metadata struct {
	// URL of the authorization server's JWK Set
	// document.  The referenced document contains the signing key(s) the
	// client uses to validate signatures from the authorization server.
	// This URL MUST use the "https" scheme.  The JWK Set MAY also
	// contain the server's encryption key or keys, which are used by
	// clients to encrypt requests to the server.  When both signing and
	// encryption keys are made available, a "use" (public key use)
	// parameter value is REQUIRED for all keys in the referenced JWK Set
	// to indicate each key's intended usage.
	//
	JwksURI string `json:"jwks_uri"`
}

type HTTPErrorResponse struct {
	Error *string `json:"error"`

	ErrorDescription *string `json:"error_description"`
}

type JSONWebKeySet struct {
	Keys *[]JSONWebKey `json:"keys"`
}

// This schema defines what a client may expect to receive when requesting  a JWK/JWKS.
// NOTE: Not all fields defined in this schema may be returned when in operational use.
type JSONWebKey struct {
	Kty string `json:"kty"`

	Use *string `json:"use"`

	Kid *string `json:"kid"`

	Alg *string `json:"alg"`

	Crv *string `json:"crv"`

	X *string `json:"x"`

	Y *string `json:"y"`

	D *string `json:"d"`

	N *string `json:"n"`

	E *string `json:"e"`

	K *string `json:"k"`
}
