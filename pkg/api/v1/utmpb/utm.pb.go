// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: pkg/api/v1/utmpb/utm.proto

package utmpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type OperationState int32

const (
	OperationState_ACCEPTED       OperationState = 0
	OperationState_ACTIVATED      OperationState = 1
	OperationState_NON_CONFORMING OperationState = 2
	OperationState_CONTINGENT     OperationState = 3
	OperationState_ENDED          OperationState = 4
)

// Enum value maps for OperationState.
var (
	OperationState_name = map[int32]string{
		0: "ACCEPTED",
		1: "ACTIVATED",
		2: "NON_CONFORMING",
		3: "CONTINGENT",
		4: "ENDED",
	}
	OperationState_value = map[string]int32{
		"ACCEPTED":       0,
		"ACTIVATED":      1,
		"NON_CONFORMING": 2,
		"CONTINGENT":     3,
		"ENDED":          4,
	}
)

func (x OperationState) Enum() *OperationState {
	p := new(OperationState)
	*p = x
	return p
}

func (x OperationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_utmpb_utm_proto_enumTypes[0].Descriptor()
}

func (OperationState) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_utmpb_utm_proto_enumTypes[0]
}

func (x OperationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationState.Descriptor instead.
func (OperationState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{0}
}

type PositionAccuracyHorizontal int32

const (
	PositionAccuracyHorizontal_HA_UNKNOWN    PositionAccuracyHorizontal = 0
	PositionAccuracyHorizontal_H_A10_NM_PLUS PositionAccuracyHorizontal = 1
	PositionAccuracyHorizontal_H_A10_NM      PositionAccuracyHorizontal = 2
	PositionAccuracyHorizontal_H_A4_NM       PositionAccuracyHorizontal = 3
	PositionAccuracyHorizontal_H_A2_NM       PositionAccuracyHorizontal = 4
	PositionAccuracyHorizontal_H_A1_NM       PositionAccuracyHorizontal = 5
	PositionAccuracyHorizontal_H_A05_NM      PositionAccuracyHorizontal = 6
	PositionAccuracyHorizontal_H_A03_NM      PositionAccuracyHorizontal = 7
	PositionAccuracyHorizontal_H_A01_NM      PositionAccuracyHorizontal = 8
	PositionAccuracyHorizontal_H_A005_NM     PositionAccuracyHorizontal = 9
	PositionAccuracyHorizontal_H_A30M        PositionAccuracyHorizontal = 10
	PositionAccuracyHorizontal_H_A10M        PositionAccuracyHorizontal = 11
	PositionAccuracyHorizontal_H_A3M         PositionAccuracyHorizontal = 12
	PositionAccuracyHorizontal_H_A1M         PositionAccuracyHorizontal = 13
)

// Enum value maps for PositionAccuracyHorizontal.
var (
	PositionAccuracyHorizontal_name = map[int32]string{
		0:  "HA_UNKNOWN",
		1:  "H_A10_NM_PLUS",
		2:  "H_A10_NM",
		3:  "H_A4_NM",
		4:  "H_A2_NM",
		5:  "H_A1_NM",
		6:  "H_A05_NM",
		7:  "H_A03_NM",
		8:  "H_A01_NM",
		9:  "H_A005_NM",
		10: "H_A30M",
		11: "H_A10M",
		12: "H_A3M",
		13: "H_A1M",
	}
	PositionAccuracyHorizontal_value = map[string]int32{
		"HA_UNKNOWN":    0,
		"H_A10_NM_PLUS": 1,
		"H_A10_NM":      2,
		"H_A4_NM":       3,
		"H_A2_NM":       4,
		"H_A1_NM":       5,
		"H_A05_NM":      6,
		"H_A03_NM":      7,
		"H_A01_NM":      8,
		"H_A005_NM":     9,
		"H_A30M":        10,
		"H_A10M":        11,
		"H_A3M":         12,
		"H_A1M":         13,
	}
)

func (x PositionAccuracyHorizontal) Enum() *PositionAccuracyHorizontal {
	p := new(PositionAccuracyHorizontal)
	*p = x
	return p
}

func (x PositionAccuracyHorizontal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PositionAccuracyHorizontal) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_utmpb_utm_proto_enumTypes[1].Descriptor()
}

func (PositionAccuracyHorizontal) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_utmpb_utm_proto_enumTypes[1]
}

func (x PositionAccuracyHorizontal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PositionAccuracyHorizontal.Descriptor instead.
func (PositionAccuracyHorizontal) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{1}
}

type PositionAccuracyVertical int32

const (
	PositionAccuracyVertical_VA_UNKNOWN   PositionAccuracyVertical = 0
	PositionAccuracyVertical_V_A150M_PLUS PositionAccuracyVertical = 1
	PositionAccuracyVertical_V_A150M      PositionAccuracyVertical = 2
	PositionAccuracyVertical_V_A45M       PositionAccuracyVertical = 3
	PositionAccuracyVertical_V_A25M       PositionAccuracyVertical = 4
	PositionAccuracyVertical_V_A10M       PositionAccuracyVertical = 5
	PositionAccuracyVertical_V_A3M        PositionAccuracyVertical = 6
	PositionAccuracyVertical_V_A1M        PositionAccuracyVertical = 7
)

// Enum value maps for PositionAccuracyVertical.
var (
	PositionAccuracyVertical_name = map[int32]string{
		0: "VA_UNKNOWN",
		1: "V_A150M_PLUS",
		2: "V_A150M",
		3: "V_A45M",
		4: "V_A25M",
		5: "V_A10M",
		6: "V_A3M",
		7: "V_A1M",
	}
	PositionAccuracyVertical_value = map[string]int32{
		"VA_UNKNOWN":   0,
		"V_A150M_PLUS": 1,
		"V_A150M":      2,
		"V_A45M":       3,
		"V_A25M":       4,
		"V_A10M":       5,
		"V_A3M":        6,
		"V_A1M":        7,
	}
)

func (x PositionAccuracyVertical) Enum() *PositionAccuracyVertical {
	p := new(PositionAccuracyVertical)
	*p = x
	return p
}

func (x PositionAccuracyVertical) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PositionAccuracyVertical) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_utmpb_utm_proto_enumTypes[2].Descriptor()
}

func (PositionAccuracyVertical) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_utmpb_utm_proto_enumTypes[2]
}

func (x PositionAccuracyVertical) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PositionAccuracyVertical.Descriptor instead.
func (PositionAccuracyVertical) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{2}
}

type Altitude_AltitudeReference int32

const (
	Altitude_ALTITUDE_REFERENCE_W84 Altitude_AltitudeReference = 0
)

// Enum value maps for Altitude_AltitudeReference.
var (
	Altitude_AltitudeReference_name = map[int32]string{
		0: "ALTITUDE_REFERENCE_W84",
	}
	Altitude_AltitudeReference_value = map[string]int32{
		"ALTITUDE_REFERENCE_W84": 0,
	}
)

func (x Altitude_AltitudeReference) Enum() *Altitude_AltitudeReference {
	p := new(Altitude_AltitudeReference)
	*p = x
	return p
}

func (x Altitude_AltitudeReference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Altitude_AltitudeReference) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_utmpb_utm_proto_enumTypes[3].Descriptor()
}

func (Altitude_AltitudeReference) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_utmpb_utm_proto_enumTypes[3]
}

func (x Altitude_AltitudeReference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Altitude_AltitudeReference.Descriptor instead.
func (Altitude_AltitudeReference) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{1, 0}
}

type Altitude_AltitudeUnits int32

const (
	Altitude_ALTITUDE_UNITS_M Altitude_AltitudeUnits = 0
)

// Enum value maps for Altitude_AltitudeUnits.
var (
	Altitude_AltitudeUnits_name = map[int32]string{
		0: "ALTITUDE_UNITS_M",
	}
	Altitude_AltitudeUnits_value = map[string]int32{
		"ALTITUDE_UNITS_M": 0,
	}
)

func (x Altitude_AltitudeUnits) Enum() *Altitude_AltitudeUnits {
	p := new(Altitude_AltitudeUnits)
	*p = x
	return p
}

func (x Altitude_AltitudeUnits) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Altitude_AltitudeUnits) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_utmpb_utm_proto_enumTypes[4].Descriptor()
}

func (Altitude_AltitudeUnits) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_utmpb_utm_proto_enumTypes[4]
}

func (x Altitude_AltitudeUnits) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Altitude_AltitudeUnits.Descriptor instead.
func (Altitude_AltitudeUnits) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{1, 1}
}

type Circle_CircleType int32

const (
	Circle_CIRCLE_TYPE_FEATURE Circle_CircleType = 0
)

// Enum value maps for Circle_CircleType.
var (
	Circle_CircleType_name = map[int32]string{
		0: "CIRCLE_TYPE_FEATURE",
	}
	Circle_CircleType_value = map[string]int32{
		"CIRCLE_TYPE_FEATURE": 0,
	}
)

func (x Circle_CircleType) Enum() *Circle_CircleType {
	p := new(Circle_CircleType)
	*p = x
	return p
}

func (x Circle_CircleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Circle_CircleType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_utmpb_utm_proto_enumTypes[5].Descriptor()
}

func (Circle_CircleType) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_utmpb_utm_proto_enumTypes[5]
}

func (x Circle_CircleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Circle_CircleType.Descriptor instead.
func (Circle_CircleType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{4, 0}
}

type Circle_GeometryMessage_GeometryMessageType int32

const (
	Circle_GeometryMessage_GEOMETRY_MESSAGE_TYPE_POINT Circle_GeometryMessage_GeometryMessageType = 0
)

// Enum value maps for Circle_GeometryMessage_GeometryMessageType.
var (
	Circle_GeometryMessage_GeometryMessageType_name = map[int32]string{
		0: "GEOMETRY_MESSAGE_TYPE_POINT",
	}
	Circle_GeometryMessage_GeometryMessageType_value = map[string]int32{
		"GEOMETRY_MESSAGE_TYPE_POINT": 0,
	}
)

func (x Circle_GeometryMessage_GeometryMessageType) Enum() *Circle_GeometryMessage_GeometryMessageType {
	p := new(Circle_GeometryMessage_GeometryMessageType)
	*p = x
	return p
}

func (x Circle_GeometryMessage_GeometryMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Circle_GeometryMessage_GeometryMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_utmpb_utm_proto_enumTypes[6].Descriptor()
}

func (Circle_GeometryMessage_GeometryMessageType) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_utmpb_utm_proto_enumTypes[6]
}

func (x Circle_GeometryMessage_GeometryMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Circle_GeometryMessage_GeometryMessageType.Descriptor instead.
func (Circle_GeometryMessage_GeometryMessageType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{4, 0, 0}
}

type Point_PointType int32

const (
	Point_POINT_TYPE_POINT Point_PointType = 0
)

// Enum value maps for Point_PointType.
var (
	Point_PointType_name = map[int32]string{
		0: "POINT_TYPE_POINT",
	}
	Point_PointType_value = map[string]int32{
		"POINT_TYPE_POINT": 0,
	}
)

func (x Point_PointType) Enum() *Point_PointType {
	p := new(Point_PointType)
	*p = x
	return p
}

func (x Point_PointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Point_PointType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_utmpb_utm_proto_enumTypes[7].Descriptor()
}

func (Point_PointType) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_utmpb_utm_proto_enumTypes[7]
}

func (x Point_PointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Point_PointType.Descriptor instead.
func (Point_PointType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{30, 0}
}

type Polygon_PolygonType int32

const (
	Polygon_POLYGON_TYPE_POLYGON Polygon_PolygonType = 0
)

// Enum value maps for Polygon_PolygonType.
var (
	Polygon_PolygonType_name = map[int32]string{
		0: "POLYGON_TYPE_POLYGON",
	}
	Polygon_PolygonType_value = map[string]int32{
		"POLYGON_TYPE_POLYGON": 0,
	}
)

func (x Polygon_PolygonType) Enum() *Polygon_PolygonType {
	p := new(Polygon_PolygonType)
	*p = x
	return p
}

func (x Polygon_PolygonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Polygon_PolygonType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_utmpb_utm_proto_enumTypes[8].Descriptor()
}

func (Polygon_PolygonType) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_utmpb_utm_proto_enumTypes[8]
}

func (x Polygon_PolygonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Polygon_PolygonType.Descriptor instead.
func (Polygon_PolygonType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{31, 0}
}

type Radius_RadiusUnits int32

const (
	Radius_RADIUS_UNITS_M Radius_RadiusUnits = 0
)

// Enum value maps for Radius_RadiusUnits.
var (
	Radius_RadiusUnits_name = map[int32]string{
		0: "RADIUS_UNITS_M",
	}
	Radius_RadiusUnits_value = map[string]int32{
		"RADIUS_UNITS_M": 0,
	}
)

func (x Radius_RadiusUnits) Enum() *Radius_RadiusUnits {
	p := new(Radius_RadiusUnits)
	*p = x
	return p
}

func (x Radius_RadiusUnits) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Radius_RadiusUnits) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_utmpb_utm_proto_enumTypes[9].Descriptor()
}

func (Radius_RadiusUnits) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_utmpb_utm_proto_enumTypes[9]
}

func (x Radius_RadiusUnits) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Radius_RadiusUnits.Descriptor instead.
func (Radius_RadiusUnits) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{44, 0}
}

type Time_TimeFormat int32

const (
	Time_TIME_FORMAT_RF_C3339 Time_TimeFormat = 0
)

// Enum value maps for Time_TimeFormat.
var (
	Time_TimeFormat_name = map[int32]string{
		0: "TIME_FORMAT_RF_C3339",
	}
	Time_TimeFormat_value = map[string]int32{
		"TIME_FORMAT_RF_C3339": 0,
	}
)

func (x Time_TimeFormat) Enum() *Time_TimeFormat {
	p := new(Time_TimeFormat)
	*p = x
	return p
}

func (x Time_TimeFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Time_TimeFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_utmpb_utm_proto_enumTypes[10].Descriptor()
}

func (Time_TimeFormat) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_utmpb_utm_proto_enumTypes[10]
}

func (x Time_TimeFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Time_TimeFormat.Descriptor instead.
func (Time_TimeFormat) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{55, 0}
}

type Velocity_VelocityUnitsSpeed int32

const (
	Velocity_VELOCITY_UNITS_SPEED_METERS_SECOND Velocity_VelocityUnitsSpeed = 0
)

// Enum value maps for Velocity_VelocityUnitsSpeed.
var (
	Velocity_VelocityUnitsSpeed_name = map[int32]string{
		0: "VELOCITY_UNITS_SPEED_METERS_SECOND",
	}
	Velocity_VelocityUnitsSpeed_value = map[string]int32{
		"VELOCITY_UNITS_SPEED_METERS_SECOND": 0,
	}
)

func (x Velocity_VelocityUnitsSpeed) Enum() *Velocity_VelocityUnitsSpeed {
	p := new(Velocity_VelocityUnitsSpeed)
	*p = x
	return p
}

func (x Velocity_VelocityUnitsSpeed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Velocity_VelocityUnitsSpeed) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_v1_utmpb_utm_proto_enumTypes[11].Descriptor()
}

func (Velocity_VelocityUnitsSpeed) Type() protoreflect.EnumType {
	return &file_pkg_api_v1_utmpb_utm_proto_enumTypes[11]
}

func (x Velocity_VelocityUnitsSpeed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Velocity_VelocityUnitsSpeed.Descriptor instead.
func (Velocity_VelocityUnitsSpeed) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{57, 0}
}

// Data provided when an airspace conflict was encountered.
type AirspaceConflictResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of Entity references for which current proof of knowledge was not provided.  If this field is present and contains elements, the calling USS should query the details URLs for these Entities to obtain their details and correct OVNs.  The OVNs can be used to update the key, at which point the USS may retry this call.
	EntityConflicts []*EntityReference `protobuf:"bytes,1,rep,name=entity_conflicts,json=entityConflicts,proto3" json:"entity_conflicts,omitempty"`
	// Human-readable message indicating what error occurred and/or why.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AirspaceConflictResponse) Reset() {
	*x = AirspaceConflictResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirspaceConflictResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirspaceConflictResponse) ProtoMessage() {}

func (x *AirspaceConflictResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirspaceConflictResponse.ProtoReflect.Descriptor instead.
func (*AirspaceConflictResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{0}
}

func (x *AirspaceConflictResponse) GetEntityConflicts() []*EntityReference {
	if x != nil {
		return x.EntityConflicts
	}
	return nil
}

func (x *AirspaceConflictResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Altitude struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A code indicating the reference for a vertical distance. See AIXM 5.1
	// and FIXM 4.2.0. Currently, UTM only allows WGS84 with no immediate
	// plans to allow other options. FIXM and AIXM allow for 'SFC' which is
	// equivalent to AGL.
	Reference Altitude_AltitudeReference `protobuf:"varint,1,opt,name=reference,proto3,enum=utmpb.Altitude_AltitudeReference" json:"reference,omitempty"`
	// The reference quantities used to express the value of altitude. See
	// FIXM 4.2. Currently, UTM only allows meters with no immediate plans
	// to allow other options.
	Units Altitude_AltitudeUnits `protobuf:"varint,2,opt,name=units,proto3,enum=utmpb.Altitude_AltitudeUnits" json:"units,omitempty"`
	// The numeric value of the altitude. Note that min and max values are
	// added as a sanity check. As use cases evolve and more options are
	// made available in terms of units of measure or reference systems,
	// these bounds should be re-evaluated.
	Value float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Altitude) Reset() {
	*x = Altitude{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Altitude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Altitude) ProtoMessage() {}

func (x *Altitude) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Altitude.ProtoReflect.Descriptor instead.
func (*Altitude) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{1}
}

func (x *Altitude) GetReference() Altitude_AltitudeReference {
	if x != nil {
		return x.Reference
	}
	return Altitude_ALTITUDE_REFERENCE_W84
}

func (x *Altitude) GetUnits() Altitude_AltitudeUnits {
	if x != nil {
		return x.Units
	}
	return Altitude_ALTITUDE_UNITS_M
}

func (x *Altitude) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Response to a request to create, update, or delete a ConstraintReference. in the DSS.
type ChangeConstraintReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstraintReference *ConstraintReference `protobuf:"bytes,1,opt,name=constraint_reference,json=constraintReference,proto3" json:"constraint_reference,omitempty"`
	// DSS subscribers that this client now has the obligation to notify of the Constraint changes just made.  This client must call POST for each provided URL according to the USS-USS `/v1/constraints/{entityuuid}` path API.  The client's own Subscriptions will also be included in this list.
	Subscribers []*SubscriberToNotify `protobuf:"bytes,2,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
}

func (x *ChangeConstraintReferenceResponse) Reset() {
	*x = ChangeConstraintReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeConstraintReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConstraintReferenceResponse) ProtoMessage() {}

func (x *ChangeConstraintReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConstraintReferenceResponse.ProtoReflect.Descriptor instead.
func (*ChangeConstraintReferenceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{2}
}

func (x *ChangeConstraintReferenceResponse) GetConstraintReference() *ConstraintReference {
	if x != nil {
		return x.ConstraintReference
	}
	return nil
}

func (x *ChangeConstraintReferenceResponse) GetSubscribers() []*SubscriberToNotify {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

// Response to a request to create, update, or delete an OperationReference
// in the DSS.
type ChangeOperationReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationReference *OperationReference `protobuf:"bytes,1,opt,name=operation_reference,json=operationReference,proto3" json:"operation_reference,omitempty"`
	// DSS subscribers that this client now has the obligation to
	// notify of the Operation changes just made.  This client must call POST
	// for each provided URL according to the USS-USS `/v1/operations/{entityuuid}`
	// path API.  The client's own Subscriptions will also be included in this list.
	Subscribers []*SubscriberToNotify `protobuf:"bytes,2,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
}

func (x *ChangeOperationReferenceResponse) Reset() {
	*x = ChangeOperationReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeOperationReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeOperationReferenceResponse) ProtoMessage() {}

func (x *ChangeOperationReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeOperationReferenceResponse.ProtoReflect.Descriptor instead.
func (*ChangeOperationReferenceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{3}
}

func (x *ChangeOperationReferenceResponse) GetOperationReference() *OperationReference {
	if x != nil {
		return x.OperationReference
	}
	return nil
}

func (x *ChangeOperationReferenceResponse) GetSubscribers() []*SubscriberToNotify {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

// Local extension of the GeoJSON specification to add a circular area defined by a
// Point/Radius pair. We extend the Properties object to include a 'radius' value (see
// CircleProperties for details).
type Circle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Geometry   *Circle_GeometryMessage `protobuf:"bytes,1,opt,name=geometry,proto3" json:"geometry,omitempty"`
	Properties *CircleProperties       `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	// The type of Geometry. In this case, must be 'Feature' per GeoJSON spec.
	Type Circle_CircleType `protobuf:"varint,3,opt,name=type,proto3,enum=utmpb.Circle_CircleType" json:"type,omitempty"`
}

func (x *Circle) Reset() {
	*x = Circle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Circle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Circle) ProtoMessage() {}

func (x *Circle) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Circle.ProtoReflect.Descriptor instead.
func (*Circle) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{4}
}

func (x *Circle) GetGeometry() *Circle_GeometryMessage {
	if x != nil {
		return x.Geometry
	}
	return nil
}

func (x *Circle) GetProperties() *CircleProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Circle) GetType() Circle_CircleType {
	if x != nil {
		return x.Type
	}
	return Circle_CIRCLE_TYPE_FEATURE
}

type CircleProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Radius *Radius `protobuf:"bytes,1,opt,name=radius,proto3" json:"radius,omitempty"`
}

func (x *CircleProperties) Reset() {
	*x = CircleProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircleProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircleProperties) ProtoMessage() {}

func (x *CircleProperties) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircleProperties.ProtoReflect.Descriptor instead.
func (*CircleProperties) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{5}
}

func (x *CircleProperties) GetRadius() *Radius {
	if x != nil {
		return x.Radius
	}
	return nil
}

// Full specification of a UTM Constraint.
type Constraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details   *ConstraintDetails   `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Reference *ConstraintReference `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *Constraint) Reset() {
	*x = Constraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constraint) ProtoMessage() {}

func (x *Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constraint.ProtoReflect.Descriptor instead.
func (*Constraint) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{6}
}

func (x *Constraint) GetDetails() *ConstraintDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Constraint) GetReference() *ConstraintReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

// Details of a UTM Constraint. Note that this data is not stored in the DSS; only with the clients.
type ConstraintDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of airspace feature this Constraint represents.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Volumes that wholly contain the Constraint while being as small as practical.
	Volumes []*Volume4D `protobuf:"bytes,2,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *ConstraintDetails) Reset() {
	*x = ConstraintDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstraintDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintDetails) ProtoMessage() {}

func (x *ConstraintDetails) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintDetails.ProtoReflect.Descriptor instead.
func (*ConstraintDetails) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{7}
}

func (x *ConstraintDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ConstraintDetails) GetVolumes() []*Volume4D {
	if x != nil {
		return x.Volumes
	}
	return nil
}

// A ConstraintReference (area in which a Constraint is present, along with other high-level information, but no details).  The DSS reports only these references and clients must exchange details and additional information peer-to-peer.
type ConstraintReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Opaque version number of this Constraint.  Populated only when the ConstraintReference
	// is owned by the USS retrieving or providing it.  Not populated when the
	// ConstraintReference is not owned by the USS retrieving or providing it (instead, the
	// USS must obtain the OVN from the details retrieved from the owning USS).
	Ovn string `protobuf:"bytes,2,opt,name=ovn,proto3" json:"ovn,omitempty"`
	// Created by the DSS based on creating client's ID (via access token).  Used internal
	// to the DSS for restricting mutation and deletion operations to owner.  Used by USSs
	// to reject Constraint update notifications originating from a USS that does not own
	// the Constraint.
	Owner      string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	TimeEnd    *Time  `protobuf:"bytes,4,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	TimeStart  *Time  `protobuf:"bytes,5,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	UssBaseUrl string `protobuf:"bytes,6,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
	// Sequential version that the DSS increments every time the Constraint changes.  A USS
	// may use this version to determine which Constraint references have new details that
	// must be retrieved.
	Version int32 `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ConstraintReference) Reset() {
	*x = ConstraintReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstraintReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintReference) ProtoMessage() {}

func (x *ConstraintReference) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintReference.ProtoReflect.Descriptor instead.
func (*ConstraintReference) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{8}
}

func (x *ConstraintReference) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConstraintReference) GetOvn() string {
	if x != nil {
		return x.Ovn
	}
	return ""
}

func (x *ConstraintReference) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ConstraintReference) GetTimeEnd() *Time {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *ConstraintReference) GetTimeStart() *Time {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

func (x *ConstraintReference) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

func (x *ConstraintReference) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type DeleteConstraintReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityUUID of the Constraint.
	Entityuuid string `protobuf:"bytes,1,opt,name=entityuuid,proto3" json:"entityuuid,omitempty"`
}

func (x *DeleteConstraintReferenceRequest) Reset() {
	*x = DeleteConstraintReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConstraintReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConstraintReferenceRequest) ProtoMessage() {}

func (x *DeleteConstraintReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConstraintReferenceRequest.ProtoReflect.Descriptor instead.
func (*DeleteConstraintReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteConstraintReferenceRequest) GetEntityuuid() string {
	if x != nil {
		return x.Entityuuid
	}
	return ""
}

type DeleteOperationReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityUUID of the Operation.
	Entityuuid string `protobuf:"bytes,1,opt,name=entityuuid,proto3" json:"entityuuid,omitempty"`
}

func (x *DeleteOperationReferenceRequest) Reset() {
	*x = DeleteOperationReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOperationReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOperationReferenceRequest) ProtoMessage() {}

func (x *DeleteOperationReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOperationReferenceRequest.ProtoReflect.Descriptor instead.
func (*DeleteOperationReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteOperationReferenceRequest) GetEntityuuid() string {
	if x != nil {
		return x.Entityuuid
	}
	return ""
}

type DeleteSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SubscriptionUUID of the subscription of interest.
	Subscriptionid string `protobuf:"bytes,1,opt,name=subscriptionid,proto3" json:"subscriptionid,omitempty"`
}

func (x *DeleteSubscriptionRequest) Reset() {
	*x = DeleteSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubscriptionRequest) ProtoMessage() {}

func (x *DeleteSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteSubscriptionRequest) GetSubscriptionid() string {
	if x != nil {
		return x.Subscriptionid
	}
	return ""
}

// Response for a successful request to delete an Subscription.
type DeleteSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscription *Subscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *DeleteSubscriptionResponse) Reset() {
	*x = DeleteSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubscriptionResponse) ProtoMessage() {}

func (x *DeleteSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteSubscriptionResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

// Reference to a generic Entity known to the DSS.
type EntityReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstraintReference *ConstraintReference `protobuf:"bytes,1,opt,name=constraint_reference,json=constraintReference,proto3" json:"constraint_reference,omitempty"`
	OperationReference  *OperationReference  `protobuf:"bytes,2,opt,name=operation_reference,json=operationReference,proto3" json:"operation_reference,omitempty"`
}

func (x *EntityReference) Reset() {
	*x = EntityReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityReference) ProtoMessage() {}

func (x *EntityReference) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityReference.ProtoReflect.Descriptor instead.
func (*EntityReference) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{13}
}

func (x *EntityReference) GetConstraintReference() *ConstraintReference {
	if x != nil {
		return x.ConstraintReference
	}
	return nil
}

func (x *EntityReference) GetOperationReference() *OperationReference {
	if x != nil {
		return x.OperationReference
	}
	return nil
}

// A report informing a server of a communication problem.
type ErrorReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base64-encoded body content sent in request that resulted in an error.
	Body string `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// Set of headers included in request that resulted in an error.
	Headers []string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	// Human-readable description of the problem with the response.
	Problem string `protobuf:"bytes,3,opt,name=problem,proto3" json:"problem,omitempty"`
	// ID assigned by the server receiving the report.  Not populated when submitting a report.
	ReportId string `protobuf:"bytes,4,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	// Base64-encoded body content received in response that was in error.
	ResponseBody string `protobuf:"bytes,5,opt,name=response_body,json=responseBody,proto3" json:"response_body,omitempty"`
	// HTTP response code encountered in error response.
	ResponseCode int32 `protobuf:"varint,6,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
	// The time at which the problematic request was initiated.
	TimeRequest *Time `protobuf:"bytes,7,opt,name=time_request,json=timeRequest,proto3" json:"time_request,omitempty"`
	// The time at which the problematic response was received.
	TimeResponse *Time `protobuf:"bytes,8,opt,name=time_response,json=timeResponse,proto3" json:"time_response,omitempty"`
	// URL of request that resulted in an error.
	Url string `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ErrorReport) Reset() {
	*x = ErrorReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorReport) ProtoMessage() {}

func (x *ErrorReport) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorReport.ProtoReflect.Descriptor instead.
func (*ErrorReport) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{14}
}

func (x *ErrorReport) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *ErrorReport) GetHeaders() []string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *ErrorReport) GetProblem() string {
	if x != nil {
		return x.Problem
	}
	return ""
}

func (x *ErrorReport) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *ErrorReport) GetResponseBody() string {
	if x != nil {
		return x.ResponseBody
	}
	return ""
}

func (x *ErrorReport) GetResponseCode() int32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

func (x *ErrorReport) GetTimeRequest() *Time {
	if x != nil {
		return x.TimeRequest
	}
	return nil
}

func (x *ErrorReport) GetTimeResponse() *Time {
	if x != nil {
		return x.TimeResponse
	}
	return nil
}

func (x *ErrorReport) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Human-readable string returned when an error occurs
// as a result of a USS - DSS transaction.
type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-readable message indicating what error occurred and/or why.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{15}
}

func (x *ErrorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Response to peer request for the details of Operation with the given ID.
type GetConstraintDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constraint *Constraint `protobuf:"bytes,1,opt,name=constraint,proto3" json:"constraint,omitempty"`
}

func (x *GetConstraintDetailsResponse) Reset() {
	*x = GetConstraintDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConstraintDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConstraintDetailsResponse) ProtoMessage() {}

func (x *GetConstraintDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConstraintDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetConstraintDetailsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{16}
}

func (x *GetConstraintDetailsResponse) GetConstraint() *Constraint {
	if x != nil {
		return x.Constraint
	}
	return nil
}

type GetConstraintReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityUUID of the Constraint.
	Entityuuid string `protobuf:"bytes,1,opt,name=entityuuid,proto3" json:"entityuuid,omitempty"`
}

func (x *GetConstraintReferenceRequest) Reset() {
	*x = GetConstraintReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConstraintReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConstraintReferenceRequest) ProtoMessage() {}

func (x *GetConstraintReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConstraintReferenceRequest.ProtoReflect.Descriptor instead.
func (*GetConstraintReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{17}
}

func (x *GetConstraintReferenceRequest) GetEntityuuid() string {
	if x != nil {
		return x.Entityuuid
	}
	return ""
}

// Response to DSS request for the ConstraintReference with the given ID.
type GetConstraintReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstraintReference *ConstraintReference `protobuf:"bytes,1,opt,name=constraint_reference,json=constraintReference,proto3" json:"constraint_reference,omitempty"`
}

func (x *GetConstraintReferenceResponse) Reset() {
	*x = GetConstraintReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConstraintReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConstraintReferenceResponse) ProtoMessage() {}

func (x *GetConstraintReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConstraintReferenceResponse.ProtoReflect.Descriptor instead.
func (*GetConstraintReferenceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{18}
}

func (x *GetConstraintReferenceResponse) GetConstraintReference() *ConstraintReference {
	if x != nil {
		return x.ConstraintReference
	}
	return nil
}

// Response to peer request for the details of Operation with the given ID.
type GetOperationDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation *Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *GetOperationDetailsResponse) Reset() {
	*x = GetOperationDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperationDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationDetailsResponse) ProtoMessage() {}

func (x *GetOperationDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetOperationDetailsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{19}
}

func (x *GetOperationDetailsResponse) GetOperation() *Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type GetOperationReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityUUID of the Operation.
	Entityuuid string `protobuf:"bytes,1,opt,name=entityuuid,proto3" json:"entityuuid,omitempty"`
}

func (x *GetOperationReferenceRequest) Reset() {
	*x = GetOperationReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperationReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationReferenceRequest) ProtoMessage() {}

func (x *GetOperationReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationReferenceRequest.ProtoReflect.Descriptor instead.
func (*GetOperationReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{20}
}

func (x *GetOperationReferenceRequest) GetEntityuuid() string {
	if x != nil {
		return x.Entityuuid
	}
	return ""
}

// Response to DSS request for the OperationReference with the given ID.
type GetOperationReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationReference *OperationReference `protobuf:"bytes,1,opt,name=operation_reference,json=operationReference,proto3" json:"operation_reference,omitempty"`
}

func (x *GetOperationReferenceResponse) Reset() {
	*x = GetOperationReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperationReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationReferenceResponse) ProtoMessage() {}

func (x *GetOperationReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationReferenceResponse.ProtoReflect.Descriptor instead.
func (*GetOperationReferenceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{21}
}

func (x *GetOperationReferenceResponse) GetOperationReference() *OperationReference {
	if x != nil {
		return x.OperationReference
	}
	return nil
}

// Response to a peer request for telemetry of an off-nominal Operation.
type GetOperationTelemetryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Telemetry *VehicleTelemetry `protobuf:"bytes,1,opt,name=telemetry,proto3" json:"telemetry,omitempty"`
}

func (x *GetOperationTelemetryResponse) Reset() {
	*x = GetOperationTelemetryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperationTelemetryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationTelemetryResponse) ProtoMessage() {}

func (x *GetOperationTelemetryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationTelemetryResponse.ProtoReflect.Descriptor instead.
func (*GetOperationTelemetryResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{22}
}

func (x *GetOperationTelemetryResponse) GetTelemetry() *VehicleTelemetry {
	if x != nil {
		return x.Telemetry
	}
	return nil
}

type GetSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SubscriptionUUID of the subscription of interest.
	Subscriptionid string `protobuf:"bytes,1,opt,name=subscriptionid,proto3" json:"subscriptionid,omitempty"`
}

func (x *GetSubscriptionRequest) Reset() {
	*x = GetSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionRequest) ProtoMessage() {}

func (x *GetSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GetSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{23}
}

func (x *GetSubscriptionRequest) GetSubscriptionid() string {
	if x != nil {
		return x.Subscriptionid
	}
	return ""
}

// Response to DSS request for the subscription with the given id.
type GetSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscription *Subscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *GetSubscriptionResponse) Reset() {
	*x = GetSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionResponse) ProtoMessage() {}

func (x *GetSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*GetSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{24}
}

func (x *GetSubscriptionResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

// Information necessary to create a Subscription to serve a single Operation's notification needs.
type ImplicitSubscriptionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if this Operation's Subscription should trigger notifications when Constraints change.  Otherwise, changes in Constraints should not trigger notifications.
	NotifyForConstraints bool `protobuf:"varint,1,opt,name=notify_for_constraints,json=notifyForConstraints,proto3" json:"notify_for_constraints,omitempty"`
	// The base URL of a USS implementation of the parts of the USS-USS API necessary for
	// receiving the notifications that the Operation must be aware of.  This includes, at least,
	// notifications for relevant changes in Operations.
	UssBaseUrl string `protobuf:"bytes,2,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
}

func (x *ImplicitSubscriptionParameters) Reset() {
	*x = ImplicitSubscriptionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplicitSubscriptionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplicitSubscriptionParameters) ProtoMessage() {}

func (x *ImplicitSubscriptionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplicitSubscriptionParameters.ProtoReflect.Descriptor instead.
func (*ImplicitSubscriptionParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{25}
}

func (x *ImplicitSubscriptionParameters) GetNotifyForConstraints() bool {
	if x != nil {
		return x.NotifyForConstraints
	}
	return false
}

func (x *ImplicitSubscriptionParameters) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

type MakeDssReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request body.
	Params *ErrorReport `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *MakeDssReportRequest) Reset() {
	*x = MakeDssReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeDssReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeDssReportRequest) ProtoMessage() {}

func (x *MakeDssReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeDssReportRequest.ProtoReflect.Descriptor instead.
func (*MakeDssReportRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{26}
}

func (x *MakeDssReportRequest) GetParams() *ErrorReport {
	if x != nil {
		return x.Params
	}
	return nil
}

// Full description of a UTM Operation.
type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details   *OperationDetails   `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Reference *OperationReference `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{27}
}

func (x *Operation) GetDetails() *OperationDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Operation) GetReference() *OperationReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

// Details of a UTM Operation. Note that this data is not stored in the DSS; only with the clients.
type OperationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State OperationState `protobuf:"varint,1,opt,name=state,proto3,enum=utmpb.OperationState" json:"state,omitempty"`
	// If true, this Operation is ensuring deconfliction visually and volumes of other Operations may overlap the volumes of this Operation.
	Vlos bool `protobuf:"varint,2,opt,name=vlos,proto3" json:"vlos,omitempty"`
	// Volumes that wholly contain the Operation while being as small as practical.
	Volumes []*Volume4D `protobuf:"bytes,3,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *OperationDetails) Reset() {
	*x = OperationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDetails) ProtoMessage() {}

func (x *OperationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDetails.ProtoReflect.Descriptor instead.
func (*OperationDetails) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{28}
}

func (x *OperationDetails) GetState() OperationState {
	if x != nil {
		return x.State
	}
	return OperationState_ACCEPTED
}

func (x *OperationDetails) GetVlos() bool {
	if x != nil {
		return x.Vlos
	}
	return false
}

func (x *OperationDetails) GetVolumes() []*Volume4D {
	if x != nil {
		return x.Volumes
	}
	return nil
}

// The high-level information of a planned or active Operation with the URL
// of a USS to query for details.  Note: 'OVN' is returned ONLY to the USS that
// created the Operation but NEVER to other USS instances.
type OperationReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Opaque version number of this Operation.  Populated only when the OperationReference
	// is owned by the USS retrieving or providing it.  Not populated when the
	// OperationReference is not owned by the USS retrieving or providing it (instead, the
	// USS must obtain the OVN from the details retrieved from the owning USS).
	Ovn string `protobuf:"bytes,2,opt,name=ovn,proto3" json:"ovn,omitempty"`
	// Created by the DSS based on creating client's ID (via access token).  Used internal
	// to the DSS for restricting mutation and deletion operations to owner.  Used by USSs
	// to reject Operation update notifications originating from a USS that does not own
	// the Operation.
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// The ID of the Subscription that is ensuring the Operation owner receives relevant
	// airspace updates.
	SubscriptionId string `protobuf:"bytes,4,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	// End time of Operation.
	TimeEnd *Time `protobuf:"bytes,5,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	// Beginning time of Operation.
	TimeStart  *Time  `protobuf:"bytes,6,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	UssBaseUrl string `protobuf:"bytes,7,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
	// Sequential version that the DSS increments every time the Operation changes.  A USS
	// may use this version to determine which Operation references have new details that
	// must be retrieved.
	Version int32 `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *OperationReference) Reset() {
	*x = OperationReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationReference) ProtoMessage() {}

func (x *OperationReference) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationReference.ProtoReflect.Descriptor instead.
func (*OperationReference) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{29}
}

func (x *OperationReference) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OperationReference) GetOvn() string {
	if x != nil {
		return x.Ovn
	}
	return ""
}

func (x *OperationReference) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *OperationReference) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *OperationReference) GetTimeEnd() *Time {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *OperationReference) GetTimeStart() *Time {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

func (x *OperationReference) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

func (x *OperationReference) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// GeoJSon Point, limited to 2D.
type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coordinates float64 `protobuf:"fixed64,1,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// The type of Geometry. In this case, must be 'Point' per GeoJSON spec.
	Type Point_PointType `protobuf:"varint,2,opt,name=type,proto3,enum=utmpb.Point_PointType" json:"type,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{30}
}

func (x *Point) GetCoordinates() float64 {
	if x != nil {
		return x.Coordinates
	}
	return 0
}

func (x *Point) GetType() Point_PointType {
	if x != nil {
		return x.Type
	}
	return Point_POINT_TYPE_POINT
}

// GeoJSon Polygon. Positions all 2D.
type Polygon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of polygons allowed.  Currently 1, implying no interior rings.  If this number is changes, the maxItems should be considered. From RFC7946: o  For type "Polygon", the "coordinates" member MUST be an array of linear ring coordinate arrays. o  For Polygons with more than one of these rings, the first MUST be the exterior ring, and any others MUST be interior rings.  The exterior ring bounds the surface, and the interior rings (if present) bound holes within the surface. Again, note we only allow a single set of coordinates, implying no interior rings.
	Coordinates []*Point `protobuf:"bytes,1,rep,name=coordinates,proto3" json:"coordinates,omitempty"`
	// The type of Geometry. In this case, must be 'Polygon' per GeoJSON
	// spec.  Note that the "coordinates" member is validated to be be an
	// array of size one. This implies there are no interior rings allowed
	// currently.
	Type Polygon_PolygonType `protobuf:"varint,2,opt,name=type,proto3,enum=utmpb.Polygon_PolygonType" json:"type,omitempty"`
}

func (x *Polygon) Reset() {
	*x = Polygon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Polygon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Polygon) ProtoMessage() {}

func (x *Polygon) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Polygon.ProtoReflect.Descriptor instead.
func (*Polygon) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{31}
}

func (x *Polygon) GetCoordinates() []*Point {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *Polygon) GetType() Polygon_PolygonType {
	if x != nil {
		return x.Type
	}
	return Polygon_POLYGON_TYPE_POLYGON
}

// Location of the vehicle (UAS) as reported for UTM.
// Note: 'accuracy' values are required when extrapolated field is true
// and always in the entry for the current state.
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccuracyH PositionAccuracyHorizontal `protobuf:"varint,1,opt,name=accuracy_h,json=accuracyH,proto3,enum=utmpb.PositionAccuracyHorizontal" json:"accuracy_h,omitempty"`
	AccuracyV PositionAccuracyVertical   `protobuf:"varint,2,opt,name=accuracy_v,json=accuracyV,proto3,enum=utmpb.PositionAccuracyVertical" json:"accuracy_v,omitempty"`
	Altitude  *Altitude                  `protobuf:"bytes,3,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// True if this position was generated primarily by computation
	// rather than primarily from a direct instrument measurement.
	// Assumed false if not specified.
	Extrapolated bool    `protobuf:"varint,4,opt,name=extrapolated,proto3" json:"extrapolated,omitempty"`
	Latitude     float64 `protobuf:"fixed64,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude    float64 `protobuf:"fixed64,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{32}
}

func (x *Position) GetAccuracyH() PositionAccuracyHorizontal {
	if x != nil {
		return x.AccuracyH
	}
	return PositionAccuracyHorizontal_HA_UNKNOWN
}

func (x *Position) GetAccuracyV() PositionAccuracyVertical {
	if x != nil {
		return x.AccuracyV
	}
	return PositionAccuracyVertical_VA_UNKNOWN
}

func (x *Position) GetAltitude() *Altitude {
	if x != nil {
		return x.Altitude
	}
	return nil
}

func (x *Position) GetExtrapolated() bool {
	if x != nil {
		return x.Extrapolated
	}
	return false
}

func (x *Position) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Position) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

// Parameters of a message informing of new full information for a Constraint.  Pushed (by a client, not the DSS) directly to clients with subscriptions when another client makes a change to airspace within a cell with a subscription.
type PutConstraintDetailsParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full information about the Constraint that has changed.  If this field is omitted,
	// the Constraint was deleted.  A newly-created Constraint can be differentiated from
	// an updated Constraint by examining the `version` field.  The `ovn` field in the
	// nested `reference` must be populated.
	Constraint *Constraint `protobuf:"bytes,1,opt,name=constraint,proto3" json:"constraint,omitempty"`
	// ID of Constraint that has changed.
	ConstraintId string `protobuf:"bytes,2,opt,name=constraint_id,json=constraintId,proto3" json:"constraint_id,omitempty"`
	// Subscription(s) prompting this notification.
	Subscriptions []*SubscriptionState `protobuf:"bytes,3,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *PutConstraintDetailsParameters) Reset() {
	*x = PutConstraintDetailsParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutConstraintDetailsParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutConstraintDetailsParameters) ProtoMessage() {}

func (x *PutConstraintDetailsParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutConstraintDetailsParameters.ProtoReflect.Descriptor instead.
func (*PutConstraintDetailsParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{33}
}

func (x *PutConstraintDetailsParameters) GetConstraint() *Constraint {
	if x != nil {
		return x.Constraint
	}
	return nil
}

func (x *PutConstraintDetailsParameters) GetConstraintId() string {
	if x != nil {
		return x.ConstraintId
	}
	return ""
}

func (x *PutConstraintDetailsParameters) GetSubscriptions() []*SubscriptionState {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

// Parameters for a request to create/update a ConstraintReference in the DSS.
type PutConstraintReferenceParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extents []*Volume4D `protobuf:"bytes,1,rep,name=extents,proto3" json:"extents,omitempty"`
	// To ensure consistency in read-modify-write operations and distributed systems, the client must
	// specify the version of this Constraint in the DSS that it is attempting to modify.  If a new
	// Constraint is being created, this version should be set to 0.
	OldVersion int32  `protobuf:"varint,2,opt,name=old_version,json=oldVersion,proto3" json:"old_version,omitempty"`
	UssBaseUrl string `protobuf:"bytes,3,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
}

func (x *PutConstraintReferenceParameters) Reset() {
	*x = PutConstraintReferenceParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutConstraintReferenceParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutConstraintReferenceParameters) ProtoMessage() {}

func (x *PutConstraintReferenceParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutConstraintReferenceParameters.ProtoReflect.Descriptor instead.
func (*PutConstraintReferenceParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{34}
}

func (x *PutConstraintReferenceParameters) GetExtents() []*Volume4D {
	if x != nil {
		return x.Extents
	}
	return nil
}

func (x *PutConstraintReferenceParameters) GetOldVersion() int32 {
	if x != nil {
		return x.OldVersion
	}
	return 0
}

func (x *PutConstraintReferenceParameters) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

type PutConstraintReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityUUID of the Constraint.
	Entityuuid string `protobuf:"bytes,1,opt,name=entityuuid,proto3" json:"entityuuid,omitempty"`
	// Request body.
	Params *PutConstraintReferenceParameters `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *PutConstraintReferenceRequest) Reset() {
	*x = PutConstraintReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutConstraintReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutConstraintReferenceRequest) ProtoMessage() {}

func (x *PutConstraintReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutConstraintReferenceRequest.ProtoReflect.Descriptor instead.
func (*PutConstraintReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{35}
}

func (x *PutConstraintReferenceRequest) GetEntityuuid() string {
	if x != nil {
		return x.Entityuuid
	}
	return ""
}

func (x *PutConstraintReferenceRequest) GetParams() *PutConstraintReferenceParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

// Parameters of a message informing of detailed information for a peer Operation.
// Pushed (by a client, not the DSS) directly to clients with subscriptions when
// another client makes a change to airspace within a cell with a subscription.
type PutOperationDetailsParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full information about the Operation that has changed.  If this field is omitted,
	// the Operation was deleted.  A newly-created Operation can be differentiated from
	// an updated Operation by examining the `version` field.  The `ovn` field in the
	// nested `reference` must be populated.
	Operation *Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	// ID of Operation that has changed.
	OperationId string `protobuf:"bytes,2,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	// Subscription(s) prompting this notification.
	Subscriptions []*SubscriptionState `protobuf:"bytes,3,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *PutOperationDetailsParameters) Reset() {
	*x = PutOperationDetailsParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutOperationDetailsParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutOperationDetailsParameters) ProtoMessage() {}

func (x *PutOperationDetailsParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutOperationDetailsParameters.ProtoReflect.Descriptor instead.
func (*PutOperationDetailsParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{36}
}

func (x *PutOperationDetailsParameters) GetOperation() *Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *PutOperationDetailsParameters) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *PutOperationDetailsParameters) GetSubscriptions() []*SubscriptionState {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

// Parameters for a request to create an OperationReference in the DSS.
// A subscription to changes overlapping this volume may be implicitly created, but
// this can be overridden by providing the (optional) 'subscription_id' to use.
// Note: The implicit subscription is managed by the DSS, not the USS.
type PutOperationReferenceParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extents []*Volume4D `protobuf:"bytes,1,rep,name=extents,proto3" json:"extents,omitempty"`
	// Proof that the USS creating or mutating this Operation was aware of the current state of the
	// airspace, with the expectation that this Operation is therefore deconflicted from all relevant
	// features in the airspce.  This field is not required when declaring an Operation NonConforming
	// or Contingent, or when there are no relevant Entities in the airspace, but is otherwise required.
	// OVNs for Constraints are required if and only if the USS owning this Operation is considering
	// Constraints, which is determined by whether the Subscription associated with this Operation
	// triggers notifications for Constraints.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// If an existing Subscription is not specified in `subscription_id`, then this field must be
	// populated.  When this field is populated, an implicit Subscription will be created and
	// associated with this Operation, and will generally be deleted automatically upon the
	// deletion of this Operation.
	NewSubscription *ImplicitSubscriptionParameters `protobuf:"bytes,3,opt,name=new_subscription,json=newSubscription,proto3" json:"new_subscription,omitempty"`
	// To ensure consistency in read-modify-write operations and distributed systems, the client must
	// specify the version of this Operation in the DSS that it is attempting to modify.  If a new
	// Operation is being created, this version should be set to 0.
	OldVersion int32          `protobuf:"varint,4,opt,name=old_version,json=oldVersion,proto3" json:"old_version,omitempty"`
	State      OperationState `protobuf:"varint,5,opt,name=state,proto3,enum=utmpb.OperationState" json:"state,omitempty"`
	// The ID of an existing Subscription that the USS will use to keep the operator informed about
	// updates to relevant airspace information.  If this field is not provided, then the
	// `new_subscription` field must be provided in order to provide notification capability
	// for the Operation.  The Subscription specified by this ID must cover at least the area over
	// which this Operation is conducted, and it must provide notifications for Operations.
	SubscriptionId string `protobuf:"bytes,6,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	UssBaseUrl     string `protobuf:"bytes,7,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
}

func (x *PutOperationReferenceParameters) Reset() {
	*x = PutOperationReferenceParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutOperationReferenceParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutOperationReferenceParameters) ProtoMessage() {}

func (x *PutOperationReferenceParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutOperationReferenceParameters.ProtoReflect.Descriptor instead.
func (*PutOperationReferenceParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{37}
}

func (x *PutOperationReferenceParameters) GetExtents() []*Volume4D {
	if x != nil {
		return x.Extents
	}
	return nil
}

func (x *PutOperationReferenceParameters) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PutOperationReferenceParameters) GetNewSubscription() *ImplicitSubscriptionParameters {
	if x != nil {
		return x.NewSubscription
	}
	return nil
}

func (x *PutOperationReferenceParameters) GetOldVersion() int32 {
	if x != nil {
		return x.OldVersion
	}
	return 0
}

func (x *PutOperationReferenceParameters) GetState() OperationState {
	if x != nil {
		return x.State
	}
	return OperationState_ACCEPTED
}

func (x *PutOperationReferenceParameters) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *PutOperationReferenceParameters) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

type PutOperationReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EntityUUID of the Operation.
	Entityuuid string `protobuf:"bytes,1,opt,name=entityuuid,proto3" json:"entityuuid,omitempty"`
	// Request body.
	Params *PutOperationReferenceParameters `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *PutOperationReferenceRequest) Reset() {
	*x = PutOperationReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutOperationReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutOperationReferenceRequest) ProtoMessage() {}

func (x *PutOperationReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutOperationReferenceRequest.ProtoReflect.Descriptor instead.
func (*PutOperationReferenceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{38}
}

func (x *PutOperationReferenceRequest) GetEntityuuid() string {
	if x != nil {
		return x.Entityuuid
	}
	return ""
}

func (x *PutOperationReferenceRequest) GetParams() *PutOperationReferenceParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

// Parameters for a request to create/update a subscription in the DSS.
type PutSubscriptionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extents *Volume4D `protobuf:"bytes,1,opt,name=extents,proto3" json:"extents,omitempty"`
	// If true, trigger notifications when Constraints are created, updated, or deleted.  Otherwise, changes in Constraints should not trigger notifications.
	NotifyForConstraints bool `protobuf:"varint,2,opt,name=notify_for_constraints,json=notifyForConstraints,proto3" json:"notify_for_constraints,omitempty"`
	// If true, trigger notifications when Operations are created, updated, or deleted.  Otherwise, changes in Operations should not trigger notifications.
	NotifyForOperations bool `protobuf:"varint,3,opt,name=notify_for_operations,json=notifyForOperations,proto3" json:"notify_for_operations,omitempty"`
	// To ensure consistency in read-modify-write operations and distributed systems, the client must
	// specify the version of this Subscription in the DSS that it is attempting to modify.  If a new
	// Subscription is being created, this version should be set to 0.
	OldVersion int32  `protobuf:"varint,4,opt,name=old_version,json=oldVersion,proto3" json:"old_version,omitempty"`
	UssBaseUrl string `protobuf:"bytes,5,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
}

func (x *PutSubscriptionParameters) Reset() {
	*x = PutSubscriptionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutSubscriptionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutSubscriptionParameters) ProtoMessage() {}

func (x *PutSubscriptionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutSubscriptionParameters.ProtoReflect.Descriptor instead.
func (*PutSubscriptionParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{39}
}

func (x *PutSubscriptionParameters) GetExtents() *Volume4D {
	if x != nil {
		return x.Extents
	}
	return nil
}

func (x *PutSubscriptionParameters) GetNotifyForConstraints() bool {
	if x != nil {
		return x.NotifyForConstraints
	}
	return false
}

func (x *PutSubscriptionParameters) GetNotifyForOperations() bool {
	if x != nil {
		return x.NotifyForOperations
	}
	return false
}

func (x *PutSubscriptionParameters) GetOldVersion() int32 {
	if x != nil {
		return x.OldVersion
	}
	return 0
}

func (x *PutSubscriptionParameters) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

type PutSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request body.
	Params *PutSubscriptionParameters `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// SubscriptionUUID of the subscription of interest.
	Subscriptionid string `protobuf:"bytes,2,opt,name=subscriptionid,proto3" json:"subscriptionid,omitempty"`
}

func (x *PutSubscriptionRequest) Reset() {
	*x = PutSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutSubscriptionRequest) ProtoMessage() {}

func (x *PutSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*PutSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{40}
}

func (x *PutSubscriptionRequest) GetParams() *PutSubscriptionParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *PutSubscriptionRequest) GetSubscriptionid() string {
	if x != nil {
		return x.Subscriptionid
	}
	return ""
}

// Response for a request to create or update a subscription.
type PutSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Constraints in or near the subscription area at the time of creation/update,
	// if `notify_for_constraints` is true
	// was specified.
	Constraints []*ConstraintReference `protobuf:"bytes,1,rep,name=constraints,proto3" json:"constraints,omitempty"`
	// Operations in or near the subscription area at the time of creation/update,
	// if `notify_for_operations` is true
	Operations   []*OperationReference `protobuf:"bytes,2,rep,name=operations,proto3" json:"operations,omitempty"`
	Subscription *Subscription         `protobuf:"bytes,3,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *PutSubscriptionResponse) Reset() {
	*x = PutSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutSubscriptionResponse) ProtoMessage() {}

func (x *PutSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*PutSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{41}
}

func (x *PutSubscriptionResponse) GetConstraints() []*ConstraintReference {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *PutSubscriptionResponse) GetOperations() []*OperationReference {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *PutSubscriptionResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type QueryConstraintReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request body.
	Params *SearchConstraintReferenceParameters `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *QueryConstraintReferencesRequest) Reset() {
	*x = QueryConstraintReferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryConstraintReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryConstraintReferencesRequest) ProtoMessage() {}

func (x *QueryConstraintReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryConstraintReferencesRequest.ProtoReflect.Descriptor instead.
func (*QueryConstraintReferencesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{42}
}

func (x *QueryConstraintReferencesRequest) GetParams() *SearchConstraintReferenceParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

type QuerySubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request body.
	Params *SearchSubscriptionParameters `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *QuerySubscriptionsRequest) Reset() {
	*x = QuerySubscriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubscriptionsRequest) ProtoMessage() {}

func (x *QuerySubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*QuerySubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{43}
}

func (x *QuerySubscriptionsRequest) GetParams() *SearchSubscriptionParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

type Radius struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FIXM-compatible units.  Only meters ("M") are acceptable for UTM.
	Units Radius_RadiusUnits `protobuf:"varint,1,opt,name=units,proto3,enum=utmpb.Radius_RadiusUnits" json:"units,omitempty"`
	// Distance from the centerpoint of a circular area, along the WGS84 ellipsoid.
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Radius) Reset() {
	*x = Radius{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Radius) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Radius) ProtoMessage() {}

func (x *Radius) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Radius.ProtoReflect.Descriptor instead.
func (*Radius) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{44}
}

func (x *Radius) GetUnits() Radius_RadiusUnits {
	if x != nil {
		return x.Units
	}
	return Radius_RADIUS_UNITS_M
}

func (x *Radius) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Parameters for a request to find ConstraintReferences matching the provided criteria.
type SearchConstraintReferenceParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaOfInterest *Volume4D `protobuf:"bytes,1,opt,name=area_of_interest,json=areaOfInterest,proto3" json:"area_of_interest,omitempty"`
}

func (x *SearchConstraintReferenceParameters) Reset() {
	*x = SearchConstraintReferenceParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchConstraintReferenceParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchConstraintReferenceParameters) ProtoMessage() {}

func (x *SearchConstraintReferenceParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchConstraintReferenceParameters.ProtoReflect.Descriptor instead.
func (*SearchConstraintReferenceParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{45}
}

func (x *SearchConstraintReferenceParameters) GetAreaOfInterest() *Volume4D {
	if x != nil {
		return x.AreaOfInterest
	}
	return nil
}

// Response to DSS query for ConstraintReferences in an area of interest.
type SearchConstraintReferencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ConstraintReferences in the area of interest.
	ConstraintReferences []*ConstraintReference `protobuf:"bytes,1,rep,name=constraint_references,json=constraintReferences,proto3" json:"constraint_references,omitempty"`
}

func (x *SearchConstraintReferencesResponse) Reset() {
	*x = SearchConstraintReferencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchConstraintReferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchConstraintReferencesResponse) ProtoMessage() {}

func (x *SearchConstraintReferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchConstraintReferencesResponse.ProtoReflect.Descriptor instead.
func (*SearchConstraintReferencesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{46}
}

func (x *SearchConstraintReferencesResponse) GetConstraintReferences() []*ConstraintReference {
	if x != nil {
		return x.ConstraintReferences
	}
	return nil
}

// Parameters for a request to find OperationReferences matching the provided criteria.
type SearchOperationReferenceParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaOfInterest *Volume4D `protobuf:"bytes,1,opt,name=area_of_interest,json=areaOfInterest,proto3" json:"area_of_interest,omitempty"`
}

func (x *SearchOperationReferenceParameters) Reset() {
	*x = SearchOperationReferenceParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOperationReferenceParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOperationReferenceParameters) ProtoMessage() {}

func (x *SearchOperationReferenceParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOperationReferenceParameters.ProtoReflect.Descriptor instead.
func (*SearchOperationReferenceParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{47}
}

func (x *SearchOperationReferenceParameters) GetAreaOfInterest() *Volume4D {
	if x != nil {
		return x.AreaOfInterest
	}
	return nil
}

// Response to DSS query for OperationReferences in an area of interest.
type SearchOperationReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OperationReferences in the area of interest.
	OperationReferences []*OperationReference `protobuf:"bytes,1,rep,name=operation_references,json=operationReferences,proto3" json:"operation_references,omitempty"`
}

func (x *SearchOperationReferenceResponse) Reset() {
	*x = SearchOperationReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOperationReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOperationReferenceResponse) ProtoMessage() {}

func (x *SearchOperationReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOperationReferenceResponse.ProtoReflect.Descriptor instead.
func (*SearchOperationReferenceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{48}
}

func (x *SearchOperationReferenceResponse) GetOperationReferences() []*OperationReference {
	if x != nil {
		return x.OperationReferences
	}
	return nil
}

type SearchOperationReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request body.
	Params *SearchOperationReferenceParameters `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *SearchOperationReferencesRequest) Reset() {
	*x = SearchOperationReferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchOperationReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchOperationReferencesRequest) ProtoMessage() {}

func (x *SearchOperationReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchOperationReferencesRequest.ProtoReflect.Descriptor instead.
func (*SearchOperationReferencesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{49}
}

func (x *SearchOperationReferencesRequest) GetParams() *SearchOperationReferenceParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

// Parameters for a request to find Subscriptions matching the provided criteria.
type SearchSubscriptionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaOfInterest *Volume4D `protobuf:"bytes,1,opt,name=area_of_interest,json=areaOfInterest,proto3" json:"area_of_interest,omitempty"`
}

func (x *SearchSubscriptionParameters) Reset() {
	*x = SearchSubscriptionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSubscriptionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSubscriptionParameters) ProtoMessage() {}

func (x *SearchSubscriptionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSubscriptionParameters.ProtoReflect.Descriptor instead.
func (*SearchSubscriptionParameters) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{50}
}

func (x *SearchSubscriptionParameters) GetAreaOfInterest() *Volume4D {
	if x != nil {
		return x.AreaOfInterest
	}
	return nil
}

// Response to DSS query for subscriptions in a particular geographic area.
type SearchSubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscriptions that overlap the specified geographic area.
	Subscriptions []*Subscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *SearchSubscriptionsResponse) Reset() {
	*x = SearchSubscriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSubscriptionsResponse) ProtoMessage() {}

func (x *SearchSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*SearchSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{51}
}

func (x *SearchSubscriptionsResponse) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

// Subscriber to notify of a change in the airspace.  This is provided by the DSS
// to a client changing the airspace, and it is the responsibility of that client
// to send a notification to the specified USS according to the change made to the
// airspace.
type SubscriberToNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscription(s) prompting this notification.
	Subscriptions []*SubscriptionState `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	UssBaseUrl    string               `protobuf:"bytes,2,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
}

func (x *SubscriberToNotify) Reset() {
	*x = SubscriberToNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberToNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberToNotify) ProtoMessage() {}

func (x *SubscriberToNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberToNotify.ProtoReflect.Descriptor instead.
func (*SubscriberToNotify) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{52}
}

func (x *SubscriberToNotify) GetSubscriptions() []*SubscriptionState {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *SubscriberToNotify) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

// Specification of a geographic area that a client is interested
// in on an ongoing basis (e.g., "planning area").
type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of Operations (UUIDs) that are dependent on this Subscription.
	DependentOperations []string `protobuf:"bytes,1,rep,name=dependent_operations,json=dependentOperations,proto3" json:"dependent_operations,omitempty"`
	Id                  string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// True if this Subscription was implicitly created by the DSS via the creation of an
	// Operation, and should therefore be deleted by the DSS when that Operation is deleted.
	ImplicitSubscription bool  `protobuf:"varint,3,opt,name=implicit_subscription,json=implicitSubscription,proto3" json:"implicit_subscription,omitempty"`
	NotificationIndex    int32 `protobuf:"varint,4,opt,name=notification_index,json=notificationIndex,proto3" json:"notification_index,omitempty"`
	// If true, trigger notifications when Constraints are created, updated, or deleted.  Otherwise, changes in Constraints should not trigger notifications.
	NotifyForConstraints bool `protobuf:"varint,5,opt,name=notify_for_constraints,json=notifyForConstraints,proto3" json:"notify_for_constraints,omitempty"`
	// If true, trigger notifications when Operations are created, updated, or deleted.  Otherwise, changes in Operations should not trigger notifications.
	NotifyForOperations bool `protobuf:"varint,6,opt,name=notify_for_operations,json=notifyForOperations,proto3" json:"notify_for_operations,omitempty"`
	// If set, this subscription will not receive notifications involving airspace changes
	// entirely after this time.
	TimeEnd *Time `protobuf:"bytes,7,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	// If set, this subscription will not receive notifications involving airspace changes
	// entirely before this time.
	TimeStart  *Time  `protobuf:"bytes,8,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	UssBaseUrl string `protobuf:"bytes,9,opt,name=uss_base_url,json=ussBaseUrl,proto3" json:"uss_base_url,omitempty"`
	// Sequential version that the DSS increments every time the Subscription changes.  A USS
	// must specify this version when modifying an existing Subscription to ensure consistency
	// in read-modify-write operations and distributed systems.
	Version int32 `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{53}
}

func (x *Subscription) GetDependentOperations() []string {
	if x != nil {
		return x.DependentOperations
	}
	return nil
}

func (x *Subscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Subscription) GetImplicitSubscription() bool {
	if x != nil {
		return x.ImplicitSubscription
	}
	return false
}

func (x *Subscription) GetNotificationIndex() int32 {
	if x != nil {
		return x.NotificationIndex
	}
	return 0
}

func (x *Subscription) GetNotifyForConstraints() bool {
	if x != nil {
		return x.NotifyForConstraints
	}
	return false
}

func (x *Subscription) GetNotifyForOperations() bool {
	if x != nil {
		return x.NotifyForOperations
	}
	return false
}

func (x *Subscription) GetTimeEnd() *Time {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *Subscription) GetTimeStart() *Time {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

func (x *Subscription) GetUssBaseUrl() string {
	if x != nil {
		return x.UssBaseUrl
	}
	return ""
}

func (x *Subscription) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// State of Subscription which is causing a notification to be sent.
type SubscriptionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationIndex int32  `protobuf:"varint,1,opt,name=notification_index,json=notificationIndex,proto3" json:"notification_index,omitempty"`
	SubscriptionId    string `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
}

func (x *SubscriptionState) Reset() {
	*x = SubscriptionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionState) ProtoMessage() {}

func (x *SubscriptionState) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionState.ProtoReflect.Descriptor instead.
func (*SubscriptionState) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{54}
}

func (x *SubscriptionState) GetNotificationIndex() int32 {
	if x != nil {
		return x.NotificationIndex
	}
	return 0
}

func (x *SubscriptionState) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format Time_TimeFormat `protobuf:"varint,1,opt,name=format,proto3,enum=utmpb.Time_TimeFormat" json:"format,omitempty"`
	// RFC3339-formatted time/date string.  The time zone must be 'Z'.
	Value *timestamp.Timestamp `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Time) Reset() {
	*x = Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Time) ProtoMessage() {}

func (x *Time) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Time.ProtoReflect.Descriptor instead.
func (*Time) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{55}
}

func (x *Time) GetFormat() Time_TimeFormat {
	if x != nil {
		return x.Format
	}
	return Time_TIME_FORMAT_RF_C3339
}

func (x *Time) GetValue() *timestamp.Timestamp {
	if x != nil {
		return x.Value
	}
	return nil
}

// Vehicle position, altitude, and velocity.
type VehicleTelemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Position     *Position `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	TimeMeasured *Time     `protobuf:"bytes,3,opt,name=time_measured,json=timeMeasured,proto3" json:"time_measured,omitempty"`
	Velocity     *Velocity `protobuf:"bytes,4,opt,name=velocity,proto3" json:"velocity,omitempty"`
}

func (x *VehicleTelemetry) Reset() {
	*x = VehicleTelemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleTelemetry) ProtoMessage() {}

func (x *VehicleTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleTelemetry.ProtoReflect.Descriptor instead.
func (*VehicleTelemetry) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{56}
}

func (x *VehicleTelemetry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VehicleTelemetry) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *VehicleTelemetry) GetTimeMeasured() *Time {
	if x != nil {
		return x.TimeMeasured
	}
	return nil
}

func (x *VehicleTelemetry) GetVelocity() *Velocity {
	if x != nil {
		return x.Velocity
	}
	return nil
}

type Velocity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ground speed in meters/second.
	Speed float32 `protobuf:"fixed32,1,opt,name=speed,proto3" json:"speed,omitempty"`
	// Direction of flight expressed as a "True North-based" ground track angle.
	// This value is provided in degrees East of North with a minimum resolution of 1 degree.
	Track      float32                     `protobuf:"fixed32,2,opt,name=track,proto3" json:"track,omitempty"`
	UnitsSpeed Velocity_VelocityUnitsSpeed `protobuf:"varint,3,opt,name=units_speed,json=unitsSpeed,proto3,enum=utmpb.Velocity_VelocityUnitsSpeed" json:"units_speed,omitempty"`
}

func (x *Velocity) Reset() {
	*x = Velocity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Velocity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Velocity) ProtoMessage() {}

func (x *Velocity) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Velocity.ProtoReflect.Descriptor instead.
func (*Velocity) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{57}
}

func (x *Velocity) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Velocity) GetTrack() float32 {
	if x != nil {
		return x.Track
	}
	return 0
}

func (x *Velocity) GetUnitsSpeed() Velocity_VelocityUnitsSpeed {
	if x != nil {
		return x.UnitsSpeed
	}
	return Velocity_VELOCITY_UNITS_SPEED_METERS_SECOND
}

// A three-dimensional geographic volume consisting of a vertically-extruded shape.  Exactly one of
// `outline_polygon` or `outline_circle` must be specified.
type Volume3D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum bounding altitude of this volume.
	AltitudeLower *Altitude `protobuf:"bytes,1,opt,name=altitude_lower,json=altitudeLower,proto3" json:"altitude_lower,omitempty"`
	// Maximum bounding altitude of this volume.
	AltitudeUpper *Altitude `protobuf:"bytes,2,opt,name=altitude_upper,json=altitudeUpper,proto3" json:"altitude_upper,omitempty"`
	// A circular geographic shape on the surface of the earth.
	OutlineCircle *Circle `protobuf:"bytes,3,opt,name=outline_circle,json=outlineCircle,proto3" json:"outline_circle,omitempty"`
	// A polygonal geographic shape on the surface of the earth.
	OutlinePolygon *Polygon `protobuf:"bytes,4,opt,name=outline_polygon,json=outlinePolygon,proto3" json:"outline_polygon,omitempty"`
}

func (x *Volume3D) Reset() {
	*x = Volume3D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume3D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume3D) ProtoMessage() {}

func (x *Volume3D) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume3D.ProtoReflect.Descriptor instead.
func (*Volume3D) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{58}
}

func (x *Volume3D) GetAltitudeLower() *Altitude {
	if x != nil {
		return x.AltitudeLower
	}
	return nil
}

func (x *Volume3D) GetAltitudeUpper() *Altitude {
	if x != nil {
		return x.AltitudeUpper
	}
	return nil
}

func (x *Volume3D) GetOutlineCircle() *Circle {
	if x != nil {
		return x.OutlineCircle
	}
	return nil
}

func (x *Volume3D) GetOutlinePolygon() *Polygon {
	if x != nil {
		return x.OutlinePolygon
	}
	return nil
}

// Contiguous block of geographic spacetime.
type Volume4D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// End time of this volume.
	TimeEnd *Time `protobuf:"bytes,1,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	// Beginning time of this volume.
	TimeStart *Time     `protobuf:"bytes,2,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
	Volume    *Volume3D `protobuf:"bytes,3,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *Volume4D) Reset() {
	*x = Volume4D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume4D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume4D) ProtoMessage() {}

func (x *Volume4D) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume4D.ProtoReflect.Descriptor instead.
func (*Volume4D) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{59}
}

func (x *Volume4D) GetTimeEnd() *Time {
	if x != nil {
		return x.TimeEnd
	}
	return nil
}

func (x *Volume4D) GetTimeStart() *Time {
	if x != nil {
		return x.TimeStart
	}
	return nil
}

func (x *Volume4D) GetVolume() *Volume3D {
	if x != nil {
		return x.Volume
	}
	return nil
}

type Circle_GeometryMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coordinates *Point `protobuf:"bytes,1,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// The type of Geometry. Must be Point.
	Type Circle_GeometryMessage_GeometryMessageType `protobuf:"varint,2,opt,name=type,proto3,enum=utmpb.Circle_GeometryMessage_GeometryMessageType" json:"type,omitempty"`
}

func (x *Circle_GeometryMessage) Reset() {
	*x = Circle_GeometryMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Circle_GeometryMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Circle_GeometryMessage) ProtoMessage() {}

func (x *Circle_GeometryMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_v1_utmpb_utm_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Circle_GeometryMessage.ProtoReflect.Descriptor instead.
func (*Circle_GeometryMessage) Descriptor() ([]byte, []int) {
	return file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Circle_GeometryMessage) GetCoordinates() *Point {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *Circle_GeometryMessage) GetType() Circle_GeometryMessage_GeometryMessageType {
	if x != nil {
		return x.Type
	}
	return Circle_GeometryMessage_GEOMETRY_MESSAGE_TYPE_POINT
}

var File_pkg_api_v1_utmpb_utm_proto protoreflect.FileDescriptor

var file_pkg_api_v1_utmpb_utm_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x74, 0x6d,
	0x70, 0x62, 0x2f, 0x75, 0x74, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x75, 0x74,
	0x6d, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x77, 0x0a, 0x18, 0x41, 0x69, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x08,
	0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x75, 0x74,
	0x6d, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x2e, 0x41, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62,
	0x2e, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x2e, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x2f, 0x0a, 0x11, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4c, 0x54,
	0x49, 0x54, 0x55, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x57, 0x38, 0x34, 0x10, 0x00, 0x22, 0x25, 0x0a, 0x0d, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4c, 0x54, 0x49, 0x54, 0x55,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x4d, 0x10, 0x00, 0x22, 0xaf, 0x01, 0x0a,
	0x21, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x22, 0xab,
	0x01, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x22, 0x94, 0x03, 0x0a,
	0x06, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x74, 0x6d, 0x70,
	0x62, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x43,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x74, 0x6d, 0x70,
	0x62, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xc0, 0x01, 0x0a, 0x0f, 0x47, 0x65,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a,
	0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x45, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x75, 0x74,
	0x6d, 0x70, 0x62, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x36, 0x0a, 0x13, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x47,
	0x45, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x00, 0x22, 0x25, 0x0a, 0x0a,
	0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x49,
	0x52, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x10, 0x00, 0x22, 0x39, 0x0a, 0x10, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e,
	0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x7a,
	0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x52, 0x0a, 0x11, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x34, 0x44, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x22, 0xdd,
	0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x76, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x76, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x74, 0x6d,
	0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x42,
	0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x75, 0x75,
	0x69, 0x64, 0x22, 0x41, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x75, 0x75, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x1a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xac, 0x01, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x22, 0xb0, 0x02, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2e, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0x29, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x51,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x22, 0x3f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x75, 0x75,
	0x69, 0x64, 0x22, 0x6f, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x4d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x75, 0x75,
	0x69, 0x64, 0x22, 0x6b, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22,
	0x56, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x22, 0x40, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x74, 0x6d,
	0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a,
	0x1e, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73,
	0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x6b, 0x65, 0x44,
	0x73, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x77, 0x0a, 0x09, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x74, 0x6d, 0x70,
	0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x22, 0x7e, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x6f, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x76, 0x6c, 0x6f, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x6d,
	0x70, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44, 0x52, 0x07, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x76, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x76, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x05,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x21, 0x0a, 0x09, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x10, 0x00, 0x22, 0x92, 0x01, 0x0a, 0x07, 0x50, 0x6f, 0x6c, 0x79, 0x67,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e,
	0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x27, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x10, 0x00, 0x22, 0x97, 0x02, 0x0a, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x5f, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x75,
	0x74, 0x6d, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x48, 0x12, 0x3e, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x56, 0x12, 0x2b, 0x0a, 0x08, 0x61, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75,
	0x74, 0x6d, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x52, 0x08, 0x61,
	0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x70, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x1e, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75,
	0x74, 0x6d, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x90, 0x01, 0x0a, 0x20, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65,
	0x55, 0x72, 0x6c, 0x22, 0x80, 0x01, 0x0a, 0x1d, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x75, 0x75, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x50, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x1d, 0x50, 0x75, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x74,
	0x6d, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x1f,
	0x50, 0x75, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x29, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34,
	0x44, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x10,
	0x6e, 0x65, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x49,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0f, 0x6e,
	0x65, 0x77, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73,
	0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x7e, 0x0a, 0x1c, 0x50, 0x75, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x75, 0x75, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e,
	0x50, 0x75, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x19, 0x50, 0x75, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x34, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x6f, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6c,
	0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6f, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x75,
	0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x7a, 0x0a,
	0x16, 0x50, 0x75, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e,
	0x50, 0x75, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x17, 0x50, 0x75,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x74, 0x6d,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x74,
	0x6d, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0x58, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75,
	0x74, 0x6d, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x72, 0x0a, 0x06, 0x52, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x05, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x21, 0x0a, 0x0b, 0x52, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x41, 0x44,
	0x49, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x4d, 0x10, 0x00, 0x22, 0x60, 0x0a,
	0x23, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x10, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6f, 0x66, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44, 0x52,
	0x0e, 0x61, 0x72, 0x65, 0x61, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x22,
	0x75, 0x0a, 0x22, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x5f, 0x0a, 0x22, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x10,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44, 0x52, 0x0e, 0x61, 0x72, 0x65, 0x61, 0x4f, 0x66, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x22, 0x70, 0x0a, 0x20, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x74, 0x6d, 0x70,
	0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x20, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x59, 0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x39, 0x0a, 0x10, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x6d,
	0x70, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x44, 0x52, 0x0e, 0x61, 0x72, 0x65,
	0x61, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x1b, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x76, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x75,
	0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xaf, 0x03,
	0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x14, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x33, 0x0a, 0x15, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x46, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x26, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x74,
	0x6d, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x73, 0x42, 0x61,
	0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x6b, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a,
	0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x46, 0x5f, 0x43, 0x33, 0x33, 0x33, 0x39, 0x10, 0x00, 0x22,
	0xae, 0x01, 0x0a, 0x10, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x56, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x22, 0xb9, 0x01, 0x0a, 0x08, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x43, 0x0a, 0x0b, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x2e,
	0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0x3c,
	0x0a, 0x12, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x22, 0x56, 0x45, 0x4c, 0x4f, 0x43, 0x49, 0x54, 0x59,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x54,
	0x45, 0x52, 0x53, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x00, 0x22, 0xe9, 0x01, 0x0a,
	0x08, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x44, 0x12, 0x36, 0x0a, 0x0e, 0x61, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x52, 0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x36, 0x0a, 0x0e, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x6d, 0x70,
	0x62, 0x2e, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x52, 0x0d, 0x61, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0e, 0x6f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x52, 0x0d, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12,
	0x37, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x67,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62,
	0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x08, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x34, 0x44, 0x12, 0x26, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x2a, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x74, 0x6d, 0x70,
	0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x44, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x2a, 0x5c, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x47,
	0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04,
	0x2a, 0xdb, 0x01, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x12,
	0x0e, 0x0a, 0x0a, 0x48, 0x41, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x48, 0x5f, 0x41, 0x31, 0x30, 0x5f, 0x4e, 0x4d, 0x5f, 0x50, 0x4c, 0x55, 0x53,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x5f, 0x41, 0x31, 0x30, 0x5f, 0x4e, 0x4d, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x48, 0x5f, 0x41, 0x34, 0x5f, 0x4e, 0x4d, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x48, 0x5f, 0x41, 0x32, 0x5f, 0x4e, 0x4d, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x5f,
	0x41, 0x31, 0x5f, 0x4e, 0x4d, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x5f, 0x41, 0x30, 0x35,
	0x5f, 0x4e, 0x4d, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x5f, 0x41, 0x30, 0x33, 0x5f, 0x4e,
	0x4d, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x5f, 0x41, 0x30, 0x31, 0x5f, 0x4e, 0x4d, 0x10,
	0x08, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x5f, 0x41, 0x30, 0x30, 0x35, 0x5f, 0x4e, 0x4d, 0x10, 0x09,
	0x12, 0x0a, 0x0a, 0x06, 0x48, 0x5f, 0x41, 0x33, 0x30, 0x4d, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06,
	0x48, 0x5f, 0x41, 0x31, 0x30, 0x4d, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x5f, 0x41, 0x33,
	0x4d, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x5f, 0x41, 0x31, 0x4d, 0x10, 0x0d, 0x2a, 0x83,
	0x01, 0x0a, 0x18, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x0a, 0x56,
	0x41, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x56,
	0x5f, 0x41, 0x31, 0x35, 0x30, 0x4d, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x56, 0x5f, 0x41, 0x31, 0x35, 0x30, 0x4d, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x5f,
	0x41, 0x34, 0x35, 0x4d, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x5f, 0x41, 0x32, 0x35, 0x4d,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x5f, 0x41, 0x31, 0x30, 0x4d, 0x10, 0x05, 0x12, 0x09,
	0x0a, 0x05, 0x56, 0x5f, 0x41, 0x33, 0x4d, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x5f, 0x41,
	0x31, 0x4d, 0x10, 0x07, 0x32, 0xaa, 0x0f, 0x0a, 0x1c, 0x55, 0x54, 0x4d, 0x41, 0x50, 0x49, 0x55,
	0x53, 0x53, 0x44, 0x53, 0x53, 0x41, 0x6e, 0x64, 0x55, 0x53, 0x53, 0x55, 0x53, 0x53, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x75,
	0x74, 0x6d, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x2a, 0x2a,
	0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x9e, 0x01, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x2a, 0x29, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x2a,
	0x26, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x7d, 0x12, 0x99, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x24, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x75, 0x75,
	0x69, 0x64, 0x7d, 0x12, 0x95, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x2e,
	0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x12, 0x29, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x80, 0x01, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x7d, 0x12, 0x61,
	0x0a, 0x0d, 0x4d, 0x61, 0x6b, 0x65, 0x44, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x1b, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x44, 0x73, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x75,
	0x74, 0x6d, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x0f, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0xa4, 0x01, 0x0a, 0x16, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x2e, 0x75,
	0x74, 0x6d, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x34, 0x1a, 0x2a, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x75, 0x75, 0x69, 0x64, 0x7d,
	0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x15, 0x50, 0x75, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x23, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x1a, 0x29, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x75, 0x75,
	0x69, 0x64, 0x7d, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x0f,
	0x50, 0x75, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x1a, 0x26, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x7d, 0x3a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x22, 0x19, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x75, 0x74, 0x6d,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x75,
	0x74, 0x6d, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x1b, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0xa1, 0x01,
	0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x75, 0x74,
	0x6d, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x75, 0x74, 0x6d, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x22, 0x2f, 0x64, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_api_v1_utmpb_utm_proto_rawDescOnce sync.Once
	file_pkg_api_v1_utmpb_utm_proto_rawDescData = file_pkg_api_v1_utmpb_utm_proto_rawDesc
)

func file_pkg_api_v1_utmpb_utm_proto_rawDescGZIP() []byte {
	file_pkg_api_v1_utmpb_utm_proto_rawDescOnce.Do(func() {
		file_pkg_api_v1_utmpb_utm_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_api_v1_utmpb_utm_proto_rawDescData)
	})
	return file_pkg_api_v1_utmpb_utm_proto_rawDescData
}

var file_pkg_api_v1_utmpb_utm_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_pkg_api_v1_utmpb_utm_proto_msgTypes = make([]protoimpl.MessageInfo, 61)
var file_pkg_api_v1_utmpb_utm_proto_goTypes = []interface{}{
	(OperationState)(0),                             // 0: utmpb.OperationState
	(PositionAccuracyHorizontal)(0),                 // 1: utmpb.PositionAccuracyHorizontal
	(PositionAccuracyVertical)(0),                   // 2: utmpb.PositionAccuracyVertical
	(Altitude_AltitudeReference)(0),                 // 3: utmpb.Altitude.AltitudeReference
	(Altitude_AltitudeUnits)(0),                     // 4: utmpb.Altitude.AltitudeUnits
	(Circle_CircleType)(0),                          // 5: utmpb.Circle.CircleType
	(Circle_GeometryMessage_GeometryMessageType)(0), // 6: utmpb.Circle.GeometryMessage.GeometryMessageType
	(Point_PointType)(0),                            // 7: utmpb.Point.PointType
	(Polygon_PolygonType)(0),                        // 8: utmpb.Polygon.PolygonType
	(Radius_RadiusUnits)(0),                         // 9: utmpb.Radius.RadiusUnits
	(Time_TimeFormat)(0),                            // 10: utmpb.Time.TimeFormat
	(Velocity_VelocityUnitsSpeed)(0),                // 11: utmpb.Velocity.VelocityUnitsSpeed
	(*AirspaceConflictResponse)(nil),                // 12: utmpb.AirspaceConflictResponse
	(*Altitude)(nil),                                // 13: utmpb.Altitude
	(*ChangeConstraintReferenceResponse)(nil),       // 14: utmpb.ChangeConstraintReferenceResponse
	(*ChangeOperationReferenceResponse)(nil),        // 15: utmpb.ChangeOperationReferenceResponse
	(*Circle)(nil),                                  // 16: utmpb.Circle
	(*CircleProperties)(nil),                        // 17: utmpb.CircleProperties
	(*Constraint)(nil),                              // 18: utmpb.Constraint
	(*ConstraintDetails)(nil),                       // 19: utmpb.ConstraintDetails
	(*ConstraintReference)(nil),                     // 20: utmpb.ConstraintReference
	(*DeleteConstraintReferenceRequest)(nil),        // 21: utmpb.DeleteConstraintReferenceRequest
	(*DeleteOperationReferenceRequest)(nil),         // 22: utmpb.DeleteOperationReferenceRequest
	(*DeleteSubscriptionRequest)(nil),               // 23: utmpb.DeleteSubscriptionRequest
	(*DeleteSubscriptionResponse)(nil),              // 24: utmpb.DeleteSubscriptionResponse
	(*EntityReference)(nil),                         // 25: utmpb.EntityReference
	(*ErrorReport)(nil),                             // 26: utmpb.ErrorReport
	(*ErrorResponse)(nil),                           // 27: utmpb.ErrorResponse
	(*GetConstraintDetailsResponse)(nil),            // 28: utmpb.GetConstraintDetailsResponse
	(*GetConstraintReferenceRequest)(nil),           // 29: utmpb.GetConstraintReferenceRequest
	(*GetConstraintReferenceResponse)(nil),          // 30: utmpb.GetConstraintReferenceResponse
	(*GetOperationDetailsResponse)(nil),             // 31: utmpb.GetOperationDetailsResponse
	(*GetOperationReferenceRequest)(nil),            // 32: utmpb.GetOperationReferenceRequest
	(*GetOperationReferenceResponse)(nil),           // 33: utmpb.GetOperationReferenceResponse
	(*GetOperationTelemetryResponse)(nil),           // 34: utmpb.GetOperationTelemetryResponse
	(*GetSubscriptionRequest)(nil),                  // 35: utmpb.GetSubscriptionRequest
	(*GetSubscriptionResponse)(nil),                 // 36: utmpb.GetSubscriptionResponse
	(*ImplicitSubscriptionParameters)(nil),          // 37: utmpb.ImplicitSubscriptionParameters
	(*MakeDssReportRequest)(nil),                    // 38: utmpb.MakeDssReportRequest
	(*Operation)(nil),                               // 39: utmpb.Operation
	(*OperationDetails)(nil),                        // 40: utmpb.OperationDetails
	(*OperationReference)(nil),                      // 41: utmpb.OperationReference
	(*Point)(nil),                                   // 42: utmpb.Point
	(*Polygon)(nil),                                 // 43: utmpb.Polygon
	(*Position)(nil),                                // 44: utmpb.Position
	(*PutConstraintDetailsParameters)(nil),          // 45: utmpb.PutConstraintDetailsParameters
	(*PutConstraintReferenceParameters)(nil),        // 46: utmpb.PutConstraintReferenceParameters
	(*PutConstraintReferenceRequest)(nil),           // 47: utmpb.PutConstraintReferenceRequest
	(*PutOperationDetailsParameters)(nil),           // 48: utmpb.PutOperationDetailsParameters
	(*PutOperationReferenceParameters)(nil),         // 49: utmpb.PutOperationReferenceParameters
	(*PutOperationReferenceRequest)(nil),            // 50: utmpb.PutOperationReferenceRequest
	(*PutSubscriptionParameters)(nil),               // 51: utmpb.PutSubscriptionParameters
	(*PutSubscriptionRequest)(nil),                  // 52: utmpb.PutSubscriptionRequest
	(*PutSubscriptionResponse)(nil),                 // 53: utmpb.PutSubscriptionResponse
	(*QueryConstraintReferencesRequest)(nil),        // 54: utmpb.QueryConstraintReferencesRequest
	(*QuerySubscriptionsRequest)(nil),               // 55: utmpb.QuerySubscriptionsRequest
	(*Radius)(nil),                                  // 56: utmpb.Radius
	(*SearchConstraintReferenceParameters)(nil),     // 57: utmpb.SearchConstraintReferenceParameters
	(*SearchConstraintReferencesResponse)(nil),      // 58: utmpb.SearchConstraintReferencesResponse
	(*SearchOperationReferenceParameters)(nil),      // 59: utmpb.SearchOperationReferenceParameters
	(*SearchOperationReferenceResponse)(nil),        // 60: utmpb.SearchOperationReferenceResponse
	(*SearchOperationReferencesRequest)(nil),        // 61: utmpb.SearchOperationReferencesRequest
	(*SearchSubscriptionParameters)(nil),            // 62: utmpb.SearchSubscriptionParameters
	(*SearchSubscriptionsResponse)(nil),             // 63: utmpb.SearchSubscriptionsResponse
	(*SubscriberToNotify)(nil),                      // 64: utmpb.SubscriberToNotify
	(*Subscription)(nil),                            // 65: utmpb.Subscription
	(*SubscriptionState)(nil),                       // 66: utmpb.SubscriptionState
	(*Time)(nil),                                    // 67: utmpb.Time
	(*VehicleTelemetry)(nil),                        // 68: utmpb.VehicleTelemetry
	(*Velocity)(nil),                                // 69: utmpb.Velocity
	(*Volume3D)(nil),                                // 70: utmpb.Volume3D
	(*Volume4D)(nil),                                // 71: utmpb.Volume4D
	(*Circle_GeometryMessage)(nil),                  // 72: utmpb.Circle.GeometryMessage
	(*timestamp.Timestamp)(nil),                     // 73: google.protobuf.Timestamp
}
var file_pkg_api_v1_utmpb_utm_proto_depIdxs = []int32{
	25, // 0: utmpb.AirspaceConflictResponse.entity_conflicts:type_name -> utmpb.EntityReference
	3,  // 1: utmpb.Altitude.reference:type_name -> utmpb.Altitude.AltitudeReference
	4,  // 2: utmpb.Altitude.units:type_name -> utmpb.Altitude.AltitudeUnits
	20, // 3: utmpb.ChangeConstraintReferenceResponse.constraint_reference:type_name -> utmpb.ConstraintReference
	64, // 4: utmpb.ChangeConstraintReferenceResponse.subscribers:type_name -> utmpb.SubscriberToNotify
	41, // 5: utmpb.ChangeOperationReferenceResponse.operation_reference:type_name -> utmpb.OperationReference
	64, // 6: utmpb.ChangeOperationReferenceResponse.subscribers:type_name -> utmpb.SubscriberToNotify
	72, // 7: utmpb.Circle.geometry:type_name -> utmpb.Circle.GeometryMessage
	17, // 8: utmpb.Circle.properties:type_name -> utmpb.CircleProperties
	5,  // 9: utmpb.Circle.type:type_name -> utmpb.Circle.CircleType
	56, // 10: utmpb.CircleProperties.radius:type_name -> utmpb.Radius
	19, // 11: utmpb.Constraint.details:type_name -> utmpb.ConstraintDetails
	20, // 12: utmpb.Constraint.reference:type_name -> utmpb.ConstraintReference
	71, // 13: utmpb.ConstraintDetails.volumes:type_name -> utmpb.Volume4D
	67, // 14: utmpb.ConstraintReference.time_end:type_name -> utmpb.Time
	67, // 15: utmpb.ConstraintReference.time_start:type_name -> utmpb.Time
	65, // 16: utmpb.DeleteSubscriptionResponse.subscription:type_name -> utmpb.Subscription
	20, // 17: utmpb.EntityReference.constraint_reference:type_name -> utmpb.ConstraintReference
	41, // 18: utmpb.EntityReference.operation_reference:type_name -> utmpb.OperationReference
	67, // 19: utmpb.ErrorReport.time_request:type_name -> utmpb.Time
	67, // 20: utmpb.ErrorReport.time_response:type_name -> utmpb.Time
	18, // 21: utmpb.GetConstraintDetailsResponse.constraint:type_name -> utmpb.Constraint
	20, // 22: utmpb.GetConstraintReferenceResponse.constraint_reference:type_name -> utmpb.ConstraintReference
	39, // 23: utmpb.GetOperationDetailsResponse.operation:type_name -> utmpb.Operation
	41, // 24: utmpb.GetOperationReferenceResponse.operation_reference:type_name -> utmpb.OperationReference
	68, // 25: utmpb.GetOperationTelemetryResponse.telemetry:type_name -> utmpb.VehicleTelemetry
	65, // 26: utmpb.GetSubscriptionResponse.subscription:type_name -> utmpb.Subscription
	26, // 27: utmpb.MakeDssReportRequest.params:type_name -> utmpb.ErrorReport
	40, // 28: utmpb.Operation.details:type_name -> utmpb.OperationDetails
	41, // 29: utmpb.Operation.reference:type_name -> utmpb.OperationReference
	0,  // 30: utmpb.OperationDetails.state:type_name -> utmpb.OperationState
	71, // 31: utmpb.OperationDetails.volumes:type_name -> utmpb.Volume4D
	67, // 32: utmpb.OperationReference.time_end:type_name -> utmpb.Time
	67, // 33: utmpb.OperationReference.time_start:type_name -> utmpb.Time
	7,  // 34: utmpb.Point.type:type_name -> utmpb.Point.PointType
	42, // 35: utmpb.Polygon.coordinates:type_name -> utmpb.Point
	8,  // 36: utmpb.Polygon.type:type_name -> utmpb.Polygon.PolygonType
	1,  // 37: utmpb.Position.accuracy_h:type_name -> utmpb.PositionAccuracyHorizontal
	2,  // 38: utmpb.Position.accuracy_v:type_name -> utmpb.PositionAccuracyVertical
	13, // 39: utmpb.Position.altitude:type_name -> utmpb.Altitude
	18, // 40: utmpb.PutConstraintDetailsParameters.constraint:type_name -> utmpb.Constraint
	66, // 41: utmpb.PutConstraintDetailsParameters.subscriptions:type_name -> utmpb.SubscriptionState
	71, // 42: utmpb.PutConstraintReferenceParameters.extents:type_name -> utmpb.Volume4D
	46, // 43: utmpb.PutConstraintReferenceRequest.params:type_name -> utmpb.PutConstraintReferenceParameters
	39, // 44: utmpb.PutOperationDetailsParameters.operation:type_name -> utmpb.Operation
	66, // 45: utmpb.PutOperationDetailsParameters.subscriptions:type_name -> utmpb.SubscriptionState
	71, // 46: utmpb.PutOperationReferenceParameters.extents:type_name -> utmpb.Volume4D
	37, // 47: utmpb.PutOperationReferenceParameters.new_subscription:type_name -> utmpb.ImplicitSubscriptionParameters
	0,  // 48: utmpb.PutOperationReferenceParameters.state:type_name -> utmpb.OperationState
	49, // 49: utmpb.PutOperationReferenceRequest.params:type_name -> utmpb.PutOperationReferenceParameters
	71, // 50: utmpb.PutSubscriptionParameters.extents:type_name -> utmpb.Volume4D
	51, // 51: utmpb.PutSubscriptionRequest.params:type_name -> utmpb.PutSubscriptionParameters
	20, // 52: utmpb.PutSubscriptionResponse.constraints:type_name -> utmpb.ConstraintReference
	41, // 53: utmpb.PutSubscriptionResponse.operations:type_name -> utmpb.OperationReference
	65, // 54: utmpb.PutSubscriptionResponse.subscription:type_name -> utmpb.Subscription
	57, // 55: utmpb.QueryConstraintReferencesRequest.params:type_name -> utmpb.SearchConstraintReferenceParameters
	62, // 56: utmpb.QuerySubscriptionsRequest.params:type_name -> utmpb.SearchSubscriptionParameters
	9,  // 57: utmpb.Radius.units:type_name -> utmpb.Radius.RadiusUnits
	71, // 58: utmpb.SearchConstraintReferenceParameters.area_of_interest:type_name -> utmpb.Volume4D
	20, // 59: utmpb.SearchConstraintReferencesResponse.constraint_references:type_name -> utmpb.ConstraintReference
	71, // 60: utmpb.SearchOperationReferenceParameters.area_of_interest:type_name -> utmpb.Volume4D
	41, // 61: utmpb.SearchOperationReferenceResponse.operation_references:type_name -> utmpb.OperationReference
	59, // 62: utmpb.SearchOperationReferencesRequest.params:type_name -> utmpb.SearchOperationReferenceParameters
	71, // 63: utmpb.SearchSubscriptionParameters.area_of_interest:type_name -> utmpb.Volume4D
	65, // 64: utmpb.SearchSubscriptionsResponse.subscriptions:type_name -> utmpb.Subscription
	66, // 65: utmpb.SubscriberToNotify.subscriptions:type_name -> utmpb.SubscriptionState
	67, // 66: utmpb.Subscription.time_end:type_name -> utmpb.Time
	67, // 67: utmpb.Subscription.time_start:type_name -> utmpb.Time
	10, // 68: utmpb.Time.format:type_name -> utmpb.Time.TimeFormat
	73, // 69: utmpb.Time.value:type_name -> google.protobuf.Timestamp
	44, // 70: utmpb.VehicleTelemetry.position:type_name -> utmpb.Position
	67, // 71: utmpb.VehicleTelemetry.time_measured:type_name -> utmpb.Time
	69, // 72: utmpb.VehicleTelemetry.velocity:type_name -> utmpb.Velocity
	11, // 73: utmpb.Velocity.units_speed:type_name -> utmpb.Velocity.VelocityUnitsSpeed
	13, // 74: utmpb.Volume3D.altitude_lower:type_name -> utmpb.Altitude
	13, // 75: utmpb.Volume3D.altitude_upper:type_name -> utmpb.Altitude
	16, // 76: utmpb.Volume3D.outline_circle:type_name -> utmpb.Circle
	43, // 77: utmpb.Volume3D.outline_polygon:type_name -> utmpb.Polygon
	67, // 78: utmpb.Volume4D.time_end:type_name -> utmpb.Time
	67, // 79: utmpb.Volume4D.time_start:type_name -> utmpb.Time
	70, // 80: utmpb.Volume4D.volume:type_name -> utmpb.Volume3D
	42, // 81: utmpb.Circle.GeometryMessage.coordinates:type_name -> utmpb.Point
	6,  // 82: utmpb.Circle.GeometryMessage.type:type_name -> utmpb.Circle.GeometryMessage.GeometryMessageType
	21, // 83: utmpb.UTMAPIUSSDSSAndUSSUSSService.DeleteConstraintReference:input_type -> utmpb.DeleteConstraintReferenceRequest
	22, // 84: utmpb.UTMAPIUSSDSSAndUSSUSSService.DeleteOperationReference:input_type -> utmpb.DeleteOperationReferenceRequest
	23, // 85: utmpb.UTMAPIUSSDSSAndUSSUSSService.DeleteSubscription:input_type -> utmpb.DeleteSubscriptionRequest
	29, // 86: utmpb.UTMAPIUSSDSSAndUSSUSSService.GetConstraintReference:input_type -> utmpb.GetConstraintReferenceRequest
	32, // 87: utmpb.UTMAPIUSSDSSAndUSSUSSService.GetOperationReference:input_type -> utmpb.GetOperationReferenceRequest
	35, // 88: utmpb.UTMAPIUSSDSSAndUSSUSSService.GetSubscription:input_type -> utmpb.GetSubscriptionRequest
	38, // 89: utmpb.UTMAPIUSSDSSAndUSSUSSService.MakeDssReport:input_type -> utmpb.MakeDssReportRequest
	47, // 90: utmpb.UTMAPIUSSDSSAndUSSUSSService.PutConstraintReference:input_type -> utmpb.PutConstraintReferenceRequest
	50, // 91: utmpb.UTMAPIUSSDSSAndUSSUSSService.PutOperationReference:input_type -> utmpb.PutOperationReferenceRequest
	52, // 92: utmpb.UTMAPIUSSDSSAndUSSUSSService.PutSubscription:input_type -> utmpb.PutSubscriptionRequest
	54, // 93: utmpb.UTMAPIUSSDSSAndUSSUSSService.QueryConstraintReferences:input_type -> utmpb.QueryConstraintReferencesRequest
	55, // 94: utmpb.UTMAPIUSSDSSAndUSSUSSService.QuerySubscriptions:input_type -> utmpb.QuerySubscriptionsRequest
	61, // 95: utmpb.UTMAPIUSSDSSAndUSSUSSService.SearchOperationReferences:input_type -> utmpb.SearchOperationReferencesRequest
	14, // 96: utmpb.UTMAPIUSSDSSAndUSSUSSService.DeleteConstraintReference:output_type -> utmpb.ChangeConstraintReferenceResponse
	15, // 97: utmpb.UTMAPIUSSDSSAndUSSUSSService.DeleteOperationReference:output_type -> utmpb.ChangeOperationReferenceResponse
	24, // 98: utmpb.UTMAPIUSSDSSAndUSSUSSService.DeleteSubscription:output_type -> utmpb.DeleteSubscriptionResponse
	30, // 99: utmpb.UTMAPIUSSDSSAndUSSUSSService.GetConstraintReference:output_type -> utmpb.GetConstraintReferenceResponse
	33, // 100: utmpb.UTMAPIUSSDSSAndUSSUSSService.GetOperationReference:output_type -> utmpb.GetOperationReferenceResponse
	36, // 101: utmpb.UTMAPIUSSDSSAndUSSUSSService.GetSubscription:output_type -> utmpb.GetSubscriptionResponse
	26, // 102: utmpb.UTMAPIUSSDSSAndUSSUSSService.MakeDssReport:output_type -> utmpb.ErrorReport
	14, // 103: utmpb.UTMAPIUSSDSSAndUSSUSSService.PutConstraintReference:output_type -> utmpb.ChangeConstraintReferenceResponse
	15, // 104: utmpb.UTMAPIUSSDSSAndUSSUSSService.PutOperationReference:output_type -> utmpb.ChangeOperationReferenceResponse
	53, // 105: utmpb.UTMAPIUSSDSSAndUSSUSSService.PutSubscription:output_type -> utmpb.PutSubscriptionResponse
	58, // 106: utmpb.UTMAPIUSSDSSAndUSSUSSService.QueryConstraintReferences:output_type -> utmpb.SearchConstraintReferencesResponse
	63, // 107: utmpb.UTMAPIUSSDSSAndUSSUSSService.QuerySubscriptions:output_type -> utmpb.SearchSubscriptionsResponse
	60, // 108: utmpb.UTMAPIUSSDSSAndUSSUSSService.SearchOperationReferences:output_type -> utmpb.SearchOperationReferenceResponse
	96, // [96:109] is the sub-list for method output_type
	83, // [83:96] is the sub-list for method input_type
	83, // [83:83] is the sub-list for extension type_name
	83, // [83:83] is the sub-list for extension extendee
	0,  // [0:83] is the sub-list for field type_name
}

func init() { file_pkg_api_v1_utmpb_utm_proto_init() }
func file_pkg_api_v1_utmpb_utm_proto_init() {
	if File_pkg_api_v1_utmpb_utm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirspaceConflictResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Altitude); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeConstraintReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeOperationReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Circle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircleProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Constraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstraintDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstraintReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConstraintReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOperationReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConstraintDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConstraintReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConstraintReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperationDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperationReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperationReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperationTelemetryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplicitSubscriptionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeDssReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Polygon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutConstraintDetailsParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutConstraintReferenceParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutConstraintReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutOperationDetailsParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutOperationReferenceParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutOperationReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutSubscriptionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryConstraintReferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubscriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Radius); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchConstraintReferenceParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchConstraintReferencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOperationReferenceParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOperationReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchOperationReferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSubscriptionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSubscriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberToNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleTelemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Velocity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume3D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume4D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_v1_utmpb_utm_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Circle_GeometryMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_api_v1_utmpb_utm_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   61,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_api_v1_utmpb_utm_proto_goTypes,
		DependencyIndexes: file_pkg_api_v1_utmpb_utm_proto_depIdxs,
		EnumInfos:         file_pkg_api_v1_utmpb_utm_proto_enumTypes,
		MessageInfos:      file_pkg_api_v1_utmpb_utm_proto_msgTypes,
	}.Build()
	File_pkg_api_v1_utmpb_utm_proto = out.File
	file_pkg_api_v1_utmpb_utm_proto_rawDesc = nil
	file_pkg_api_v1_utmpb_utm_proto_goTypes = nil
	file_pkg_api_v1_utmpb_utm_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UTMAPIUSSDSSAndUSSUSSServiceClient is the client API for UTMAPIUSSDSSAndUSSUSSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UTMAPIUSSDSSAndUSSUSSServiceClient interface {
	// Delete the specified Constraint reference from the DSS.
	DeleteConstraintReference(ctx context.Context, in *DeleteConstraintReferenceRequest, opts ...grpc.CallOption) (*ChangeConstraintReferenceResponse, error)
	// Remove the specified Operation reference from the DSS.
	DeleteOperationReference(ctx context.Context, in *DeleteOperationReferenceRequest, opts ...grpc.CallOption) (*ChangeOperationReferenceResponse, error)
	// Remove the specified Subscription from the DSS.
	DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*DeleteSubscriptionResponse, error)
	// Retrieve the specified Constraint reference from the DSS.
	GetConstraintReference(ctx context.Context, in *GetConstraintReferenceRequest, opts ...grpc.CallOption) (*GetConstraintReferenceResponse, error)
	// Retrieve the specified Operation reference from the DSS.
	GetOperationReference(ctx context.Context, in *GetOperationReferenceRequest, opts ...grpc.CallOption) (*GetOperationReferenceResponse, error)
	// Retrieve the specified Subscription from the DSS.
	//
	// Retrieve a specific subscription.
	GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error)
	// Report information about communication issues to a DSS.
	//
	// Report issues to a DSS. Data sent to this endpoint is archived.
	MakeDssReport(ctx context.Context, in *MakeDssReportRequest, opts ...grpc.CallOption) (*ErrorReport, error)
	// Create/Update the specified Constraint reference in the DSS.
	PutConstraintReference(ctx context.Context, in *PutConstraintReferenceRequest, opts ...grpc.CallOption) (*ChangeConstraintReferenceResponse, error)
	// Create/Update the specified Operation reference in the DSS.
	PutOperationReference(ctx context.Context, in *PutOperationReferenceRequest, opts ...grpc.CallOption) (*ChangeOperationReferenceResponse, error)
	// Create/Update the specified Subscription in the DSS.
	//
	// Create or update a subscription.
	//
	// Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	PutSubscription(ctx context.Context, in *PutSubscriptionRequest, opts ...grpc.CallOption) (*PutSubscriptionResponse, error)
	// Retrieve all Constraints references in the specified area/volume from the DSS.
	QueryConstraintReferences(ctx context.Context, in *QueryConstraintReferencesRequest, opts ...grpc.CallOption) (*SearchConstraintReferencesResponse, error)
	// Retrieve all Subscriptions in the specified area/volume from the DSS.
	//
	// Retrieve Subscriptions intersecting an area of interest.  Subscription
	// notifications are only triggered by (and contain full information of) changes to,
	// creation of, or deletion of, Entities referenced by or stored in the DSS;
	// they do not involve any data transfer (such as remote ID telemetry updates) apart
	// from Entity information.
	//
	// Note that this parameter is a JSON object (in the 'request-body'). Note that either
	// or both of the 'altitude' and 'time' values may be omitted from this parameter.
	//
	// Only Subscriptions belonging to the caller are returned.  This endpoint would be
	// used if a USS lost track of Subscriptions they had created and/or wanted to resolve
	// an error indicating that they had too many existing Subscriptions in an area.
	QuerySubscriptions(ctx context.Context, in *QuerySubscriptionsRequest, opts ...grpc.CallOption) (*SearchSubscriptionsResponse, error)
	// Retrieve all Operation references in the specified area/volume/time from the DSS.
	SearchOperationReferences(ctx context.Context, in *SearchOperationReferencesRequest, opts ...grpc.CallOption) (*SearchOperationReferenceResponse, error)
}

type uTMAPIUSSDSSAndUSSUSSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUTMAPIUSSDSSAndUSSUSSServiceClient(cc grpc.ClientConnInterface) UTMAPIUSSDSSAndUSSUSSServiceClient {
	return &uTMAPIUSSDSSAndUSSUSSServiceClient{cc}
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) DeleteConstraintReference(ctx context.Context, in *DeleteConstraintReferenceRequest, opts ...grpc.CallOption) (*ChangeConstraintReferenceResponse, error) {
	out := new(ChangeConstraintReferenceResponse)
	err := c.cc.Invoke(ctx, "/utmpb.UTMAPIUSSDSSAndUSSUSSService/DeleteConstraintReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) DeleteOperationReference(ctx context.Context, in *DeleteOperationReferenceRequest, opts ...grpc.CallOption) (*ChangeOperationReferenceResponse, error) {
	out := new(ChangeOperationReferenceResponse)
	err := c.cc.Invoke(ctx, "/utmpb.UTMAPIUSSDSSAndUSSUSSService/DeleteOperationReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*DeleteSubscriptionResponse, error) {
	out := new(DeleteSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/utmpb.UTMAPIUSSDSSAndUSSUSSService/DeleteSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) GetConstraintReference(ctx context.Context, in *GetConstraintReferenceRequest, opts ...grpc.CallOption) (*GetConstraintReferenceResponse, error) {
	out := new(GetConstraintReferenceResponse)
	err := c.cc.Invoke(ctx, "/utmpb.UTMAPIUSSDSSAndUSSUSSService/GetConstraintReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) GetOperationReference(ctx context.Context, in *GetOperationReferenceRequest, opts ...grpc.CallOption) (*GetOperationReferenceResponse, error) {
	out := new(GetOperationReferenceResponse)
	err := c.cc.Invoke(ctx, "/utmpb.UTMAPIUSSDSSAndUSSUSSService/GetOperationReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error) {
	out := new(GetSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/utmpb.UTMAPIUSSDSSAndUSSUSSService/GetSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) MakeDssReport(ctx context.Context, in *MakeDssReportRequest, opts ...grpc.CallOption) (*ErrorReport, error) {
	out := new(ErrorReport)
	err := c.cc.Invoke(ctx, "/utmpb.UTMAPIUSSDSSAndUSSUSSService/MakeDssReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) PutConstraintReference(ctx context.Context, in *PutConstraintReferenceRequest, opts ...grpc.CallOption) (*ChangeConstraintReferenceResponse, error) {
	out := new(ChangeConstraintReferenceResponse)
	err := c.cc.Invoke(ctx, "/utmpb.UTMAPIUSSDSSAndUSSUSSService/PutConstraintReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) PutOperationReference(ctx context.Context, in *PutOperationReferenceRequest, opts ...grpc.CallOption) (*ChangeOperationReferenceResponse, error) {
	out := new(ChangeOperationReferenceResponse)
	err := c.cc.Invoke(ctx, "/utmpb.UTMAPIUSSDSSAndUSSUSSService/PutOperationReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) PutSubscription(ctx context.Context, in *PutSubscriptionRequest, opts ...grpc.CallOption) (*PutSubscriptionResponse, error) {
	out := new(PutSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/utmpb.UTMAPIUSSDSSAndUSSUSSService/PutSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) QueryConstraintReferences(ctx context.Context, in *QueryConstraintReferencesRequest, opts ...grpc.CallOption) (*SearchConstraintReferencesResponse, error) {
	out := new(SearchConstraintReferencesResponse)
	err := c.cc.Invoke(ctx, "/utmpb.UTMAPIUSSDSSAndUSSUSSService/QueryConstraintReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) QuerySubscriptions(ctx context.Context, in *QuerySubscriptionsRequest, opts ...grpc.CallOption) (*SearchSubscriptionsResponse, error) {
	out := new(SearchSubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/utmpb.UTMAPIUSSDSSAndUSSUSSService/QuerySubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTMAPIUSSDSSAndUSSUSSServiceClient) SearchOperationReferences(ctx context.Context, in *SearchOperationReferencesRequest, opts ...grpc.CallOption) (*SearchOperationReferenceResponse, error) {
	out := new(SearchOperationReferenceResponse)
	err := c.cc.Invoke(ctx, "/utmpb.UTMAPIUSSDSSAndUSSUSSService/SearchOperationReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UTMAPIUSSDSSAndUSSUSSServiceServer is the server API for UTMAPIUSSDSSAndUSSUSSService service.
type UTMAPIUSSDSSAndUSSUSSServiceServer interface {
	// Delete the specified Constraint reference from the DSS.
	DeleteConstraintReference(context.Context, *DeleteConstraintReferenceRequest) (*ChangeConstraintReferenceResponse, error)
	// Remove the specified Operation reference from the DSS.
	DeleteOperationReference(context.Context, *DeleteOperationReferenceRequest) (*ChangeOperationReferenceResponse, error)
	// Remove the specified Subscription from the DSS.
	DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error)
	// Retrieve the specified Constraint reference from the DSS.
	GetConstraintReference(context.Context, *GetConstraintReferenceRequest) (*GetConstraintReferenceResponse, error)
	// Retrieve the specified Operation reference from the DSS.
	GetOperationReference(context.Context, *GetOperationReferenceRequest) (*GetOperationReferenceResponse, error)
	// Retrieve the specified Subscription from the DSS.
	//
	// Retrieve a specific subscription.
	GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error)
	// Report information about communication issues to a DSS.
	//
	// Report issues to a DSS. Data sent to this endpoint is archived.
	MakeDssReport(context.Context, *MakeDssReportRequest) (*ErrorReport, error)
	// Create/Update the specified Constraint reference in the DSS.
	PutConstraintReference(context.Context, *PutConstraintReferenceRequest) (*ChangeConstraintReferenceResponse, error)
	// Create/Update the specified Operation reference in the DSS.
	PutOperationReference(context.Context, *PutOperationReferenceRequest) (*ChangeOperationReferenceResponse, error)
	// Create/Update the specified Subscription in the DSS.
	//
	// Create or update a subscription.
	//
	// Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
	PutSubscription(context.Context, *PutSubscriptionRequest) (*PutSubscriptionResponse, error)
	// Retrieve all Constraints references in the specified area/volume from the DSS.
	QueryConstraintReferences(context.Context, *QueryConstraintReferencesRequest) (*SearchConstraintReferencesResponse, error)
	// Retrieve all Subscriptions in the specified area/volume from the DSS.
	//
	// Retrieve Subscriptions intersecting an area of interest.  Subscription
	// notifications are only triggered by (and contain full information of) changes to,
	// creation of, or deletion of, Entities referenced by or stored in the DSS;
	// they do not involve any data transfer (such as remote ID telemetry updates) apart
	// from Entity information.
	//
	// Note that this parameter is a JSON object (in the 'request-body'). Note that either
	// or both of the 'altitude' and 'time' values may be omitted from this parameter.
	//
	// Only Subscriptions belonging to the caller are returned.  This endpoint would be
	// used if a USS lost track of Subscriptions they had created and/or wanted to resolve
	// an error indicating that they had too many existing Subscriptions in an area.
	QuerySubscriptions(context.Context, *QuerySubscriptionsRequest) (*SearchSubscriptionsResponse, error)
	// Retrieve all Operation references in the specified area/volume/time from the DSS.
	SearchOperationReferences(context.Context, *SearchOperationReferencesRequest) (*SearchOperationReferenceResponse, error)
}

// UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer struct {
}

func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) DeleteConstraintReference(context.Context, *DeleteConstraintReferenceRequest) (*ChangeConstraintReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConstraintReference not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) DeleteOperationReference(context.Context, *DeleteOperationReferenceRequest) (*ChangeOperationReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOperationReference not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscription not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) GetConstraintReference(context.Context, *GetConstraintReferenceRequest) (*GetConstraintReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConstraintReference not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) GetOperationReference(context.Context, *GetOperationReferenceRequest) (*GetOperationReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationReference not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) MakeDssReport(context.Context, *MakeDssReportRequest) (*ErrorReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDssReport not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) PutConstraintReference(context.Context, *PutConstraintReferenceRequest) (*ChangeConstraintReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutConstraintReference not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) PutOperationReference(context.Context, *PutOperationReferenceRequest) (*ChangeOperationReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOperationReference not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) PutSubscription(context.Context, *PutSubscriptionRequest) (*PutSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSubscription not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) QueryConstraintReferences(context.Context, *QueryConstraintReferencesRequest) (*SearchConstraintReferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryConstraintReferences not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) QuerySubscriptions(context.Context, *QuerySubscriptionsRequest) (*SearchSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySubscriptions not implemented")
}
func (*UnimplementedUTMAPIUSSDSSAndUSSUSSServiceServer) SearchOperationReferences(context.Context, *SearchOperationReferencesRequest) (*SearchOperationReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOperationReferences not implemented")
}

func RegisterUTMAPIUSSDSSAndUSSUSSServiceServer(s *grpc.Server, srv UTMAPIUSSDSSAndUSSUSSServiceServer) {
	s.RegisterService(&_UTMAPIUSSDSSAndUSSUSSService_serviceDesc, srv)
}

func _UTMAPIUSSDSSAndUSSUSSService_DeleteConstraintReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConstraintReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).DeleteConstraintReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utmpb.UTMAPIUSSDSSAndUSSUSSService/DeleteConstraintReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).DeleteConstraintReference(ctx, req.(*DeleteConstraintReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_DeleteOperationReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOperationReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).DeleteOperationReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utmpb.UTMAPIUSSDSSAndUSSUSSService/DeleteOperationReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).DeleteOperationReference(ctx, req.(*DeleteOperationReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_DeleteSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).DeleteSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utmpb.UTMAPIUSSDSSAndUSSUSSService/DeleteSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).DeleteSubscription(ctx, req.(*DeleteSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_GetConstraintReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConstraintReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).GetConstraintReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utmpb.UTMAPIUSSDSSAndUSSUSSService/GetConstraintReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).GetConstraintReference(ctx, req.(*GetConstraintReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_GetOperationReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).GetOperationReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utmpb.UTMAPIUSSDSSAndUSSUSSService/GetOperationReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).GetOperationReference(ctx, req.(*GetOperationReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utmpb.UTMAPIUSSDSSAndUSSUSSService/GetSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).GetSubscription(ctx, req.(*GetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_MakeDssReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeDssReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).MakeDssReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utmpb.UTMAPIUSSDSSAndUSSUSSService/MakeDssReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).MakeDssReport(ctx, req.(*MakeDssReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_PutConstraintReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutConstraintReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).PutConstraintReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utmpb.UTMAPIUSSDSSAndUSSUSSService/PutConstraintReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).PutConstraintReference(ctx, req.(*PutConstraintReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_PutOperationReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutOperationReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).PutOperationReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utmpb.UTMAPIUSSDSSAndUSSUSSService/PutOperationReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).PutOperationReference(ctx, req.(*PutOperationReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_PutSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).PutSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utmpb.UTMAPIUSSDSSAndUSSUSSService/PutSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).PutSubscription(ctx, req.(*PutSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_QueryConstraintReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConstraintReferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).QueryConstraintReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utmpb.UTMAPIUSSDSSAndUSSUSSService/QueryConstraintReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).QueryConstraintReferences(ctx, req.(*QueryConstraintReferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_QuerySubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).QuerySubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utmpb.UTMAPIUSSDSSAndUSSUSSService/QuerySubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).QuerySubscriptions(ctx, req.(*QuerySubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTMAPIUSSDSSAndUSSUSSService_SearchOperationReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOperationReferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).SearchOperationReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utmpb.UTMAPIUSSDSSAndUSSUSSService/SearchOperationReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTMAPIUSSDSSAndUSSUSSServiceServer).SearchOperationReferences(ctx, req.(*SearchOperationReferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UTMAPIUSSDSSAndUSSUSSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "utmpb.UTMAPIUSSDSSAndUSSUSSService",
	HandlerType: (*UTMAPIUSSDSSAndUSSUSSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteConstraintReference",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_DeleteConstraintReference_Handler,
		},
		{
			MethodName: "DeleteOperationReference",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_DeleteOperationReference_Handler,
		},
		{
			MethodName: "DeleteSubscription",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_DeleteSubscription_Handler,
		},
		{
			MethodName: "GetConstraintReference",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_GetConstraintReference_Handler,
		},
		{
			MethodName: "GetOperationReference",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_GetOperationReference_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_GetSubscription_Handler,
		},
		{
			MethodName: "MakeDssReport",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_MakeDssReport_Handler,
		},
		{
			MethodName: "PutConstraintReference",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_PutConstraintReference_Handler,
		},
		{
			MethodName: "PutOperationReference",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_PutOperationReference_Handler,
		},
		{
			MethodName: "PutSubscription",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_PutSubscription_Handler,
		},
		{
			MethodName: "QueryConstraintReferences",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_QueryConstraintReferences_Handler,
		},
		{
			MethodName: "QuerySubscriptions",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_QuerySubscriptions_Handler,
		},
		{
			MethodName: "SearchOperationReferences",
			Handler:    _UTMAPIUSSDSSAndUSSUSSService_SearchOperationReferences_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/v1/utmpb/utm.proto",
}
