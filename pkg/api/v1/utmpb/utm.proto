syntax = "proto3";

package utmpb;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

enum OperationState {
  ACCEPTED = 0;
  ACTIVATED = 1;
  NON_CONFORMING = 2;
  CONTINGENT = 3;
  ENDED = 4;
}

enum PositionAccuracyHorizontal {
  HA_UNKNOWN = 0;
  H_A10_NM_PLUS = 1;
  H_A10_NM = 2;
  H_A4_NM = 3;
  H_A2_NM = 4;
  H_A1_NM = 5;
  H_A05_NM = 6;
  H_A03_NM = 7;
  H_A01_NM = 8;
  H_A005_NM = 9;
  H_A30M = 10;
  H_A10M = 11;
  H_A3M = 12;
  H_A1M = 13;
}

enum PositionAccuracyVertical {
  VA_UNKNOWN = 0;
  V_A150M_PLUS = 1;
  V_A150M = 2;
  V_A45M = 3;
  V_A25M = 4;
  V_A10M = 5;
  V_A3M = 6;
  V_A1M = 7;
}

// Data provided when an airspace conflict was encountered.
message AirspaceConflictResponse {
  // List of Entity references for which current proof of knowledge was not provided.  If this field is present and contains elements, the calling USS should query the details URLs for these Entities to obtain their details and correct OVNs.  The OVNs can be used to update the key, at which point the USS may retry this call.
  repeated EntityReference entity_conflicts = 1;

  // Human-readable message indicating what error occurred and/or why.
  string message = 2;
}

message Altitude {
  enum AltitudeReference {
    ALTITUDE_REFERENCE_W84 = 0;
  }

  enum AltitudeUnits {
    ALTITUDE_UNITS_M = 0;
  }

  // A code indicating the reference for a vertical distance. See AIXM 5.1
  // and FIXM 4.2.0. Currently, UTM only allows WGS84 with no immediate
  // plans to allow other options. FIXM and AIXM allow for 'SFC' which is
  // equivalent to AGL.
  AltitudeReference reference = 1;

  // The reference quantities used to express the value of altitude. See
  // FIXM 4.2. Currently, UTM only allows meters with no immediate plans
  // to allow other options.
  AltitudeUnits units = 2;

  // The numeric value of the altitude. Note that min and max values are
  // added as a sanity check. As use cases evolve and more options are
  // made available in terms of units of measure or reference systems,
  // these bounds should be re-evaluated.
  double value = 3;
}

// Response to a request to create, update, or delete a ConstraintReference. in the DSS.
message ChangeConstraintReferenceResponse {
  ConstraintReference constraint_reference = 1;

  // DSS subscribers that this client now has the obligation to notify of the Constraint changes just made.  This client must call POST for each provided URL according to the USS-USS `/v1/constraints/{entityuuid}` path API.  The client's own Subscriptions will also be included in this list.
  repeated SubscriberToNotify subscribers = 2;
}

// Response to a request to create, update, or delete an OperationReference
// in the DSS.
message ChangeOperationReferenceResponse {
  OperationReference operation_reference = 1;

  // DSS subscribers that this client now has the obligation to
  // notify of the Operation changes just made.  This client must call POST
  // for each provided URL according to the USS-USS `/v1/operations/{entityuuid}`
  // path API.  The client's own Subscriptions will also be included in this list.
  repeated SubscriberToNotify subscribers = 2;
}

// Local extension of the GeoJSON specification to add a circular area defined by a
// Point/Radius pair. We extend the Properties object to include a 'radius' value (see
// CircleProperties for details).
message Circle {
  enum CircleType {
    CIRCLE_TYPE_FEATURE = 0;
  }

  message GeometryMessage {
    enum GeometryMessageType {
      GEOMETRY_MESSAGE_TYPE_POINT = 0;
    }

    Point coordinates = 1;

    // The type of Geometry. Must be Point.
    GeometryMessageType type = 2;
  }

  GeometryMessage geometry = 1;
  CircleProperties properties = 2;

  // The type of Geometry. In this case, must be 'Feature' per GeoJSON spec.
  CircleType type = 3;
}

message CircleProperties {
  Radius radius = 1;
}

// Full specification of a UTM Constraint.
message Constraint {
  ConstraintDetails details = 1;
  ConstraintReference reference = 2;
}

// Details of a UTM Constraint. Note that this data is not stored in the DSS; only with the clients.
message ConstraintDetails {
  // Type of airspace feature this Constraint represents.
  string type = 1;

  // Volumes that wholly contain the Constraint while being as small as practical.
  repeated Volume4D volumes = 2;
}

// A ConstraintReference (area in which a Constraint is present, along with other high-level information, but no details).  The DSS reports only these references and clients must exchange details and additional information peer-to-peer.
message ConstraintReference {
  string id = 1;

  // Opaque version number of this Constraint.  Populated only when the ConstraintReference
  // is owned by the USS retrieving or providing it.  Not populated when the
  // ConstraintReference is not owned by the USS retrieving or providing it (instead, the
  // USS must obtain the OVN from the details retrieved from the owning USS).
  string ovn = 2;

  // Created by the DSS based on creating client's ID (via access token).  Used internal
  // to the DSS for restricting mutation and deletion operations to owner.  Used by USSs
  // to reject Constraint update notifications originating from a USS that does not own
  // the Constraint.
  string owner = 3;
  Time time_end = 4;
  Time time_start = 5;
  string uss_base_url = 6;

  // Sequential version that the DSS increments every time the Constraint changes.  A USS
  // may use this version to determine which Constraint references have new details that
  // must be retrieved.
  int32 version = 7;
}

message DeleteConstraintReferenceRequest {
  // EntityUUID of the Constraint.
  string entityuuid = 1;
}

message DeleteOperationReferenceRequest {
  // EntityUUID of the Operation.
  string entityuuid = 1;
}

message DeleteSubscriptionRequest {
  // SubscriptionUUID of the subscription of interest.
  string subscriptionid = 1;
}

// Response for a successful request to delete an Subscription.
message DeleteSubscriptionResponse {
  Subscription subscription = 1;
}

// Reference to a generic Entity known to the DSS.
message EntityReference {
  ConstraintReference constraint_reference = 1;
  OperationReference operation_reference = 2;
}

// A report informing a server of a communication problem.
message ErrorReport {
  // Base64-encoded body content sent in request that resulted in an error.
  string body = 1;

  // Set of headers included in request that resulted in an error.
  repeated string headers = 2;

  // Human-readable description of the problem with the response.
  string problem = 3;

  // ID assigned by the server receiving the report.  Not populated when submitting a report.
  string report_id = 4;

  // Base64-encoded body content received in response that was in error.
  string response_body = 5;

  // HTTP response code encountered in error response.
  int32 response_code = 6;

  // The time at which the problematic request was initiated.
  Time time_request = 7;

  // The time at which the problematic response was received.
  Time time_response = 8;

  // URL of request that resulted in an error.
  string url = 9;
}

// Human-readable string returned when an error occurs
// as a result of a USS - DSS transaction.
message ErrorResponse {
  // Human-readable message indicating what error occurred and/or why.
  string message = 1;
}

// Response to peer request for the details of Operation with the given ID.
message GetConstraintDetailsResponse {
  Constraint constraint = 1;
}

message GetConstraintReferenceRequest {
  // EntityUUID of the Constraint.
  string entityuuid = 1;
}

// Response to DSS request for the ConstraintReference with the given ID.
message GetConstraintReferenceResponse {
  ConstraintReference constraint_reference = 1;
}

// Response to peer request for the details of Operation with the given ID.
message GetOperationDetailsResponse {
  Operation operation = 1;
}

message GetOperationReferenceRequest {
  // EntityUUID of the Operation.
  string entityuuid = 1;
}

// Response to DSS request for the OperationReference with the given ID.
message GetOperationReferenceResponse {
  OperationReference operation_reference = 1;
}

// Response to a peer request for telemetry of an off-nominal Operation.
message GetOperationTelemetryResponse {
  VehicleTelemetry telemetry = 1;
}

message GetSubscriptionRequest {
  // SubscriptionUUID of the subscription of interest.
  string subscriptionid = 1;
}

// Response to DSS request for the subscription with the given id.
message GetSubscriptionResponse {
  Subscription subscription = 1;
}

// Information necessary to create a Subscription to serve a single Operation's notification needs.
message ImplicitSubscriptionParameters {
  // True if this Operation's Subscription should trigger notifications when Constraints change.  Otherwise, changes in Constraints should not trigger notifications.
  bool notify_for_constraints = 1;

  // The base URL of a USS implementation of the parts of the USS-USS API necessary for
  // receiving the notifications that the Operation must be aware of.  This includes, at least,
  // notifications for relevant changes in Operations.
  string uss_base_url = 2;
}

message MakeDssReportRequest {
  // Request body.
  ErrorReport params = 1;
}

// Full description of a UTM Operation.
message Operation {
  OperationDetails details = 1;
  OperationReference reference = 2;
}

// Details of a UTM Operation. Note that this data is not stored in the DSS; only with the clients.
message OperationDetails {
  OperationState state = 1;

  // If true, this Operation is ensuring deconfliction visually and volumes of other Operations may overlap the volumes of this Operation.
  bool vlos = 2;

  // Volumes that wholly contain the Operation while being as small as practical.
  repeated Volume4D volumes = 3;
}

// The high-level information of a planned or active Operation with the URL
// of a USS to query for details.  Note: 'OVN' is returned ONLY to the USS that
// created the Operation but NEVER to other USS instances.
message OperationReference {
  string id = 1;

  // Opaque version number of this Operation.  Populated only when the OperationReference
  // is owned by the USS retrieving or providing it.  Not populated when the
  // OperationReference is not owned by the USS retrieving or providing it (instead, the
  // USS must obtain the OVN from the details retrieved from the owning USS).
  string ovn = 2;

  // Created by the DSS based on creating client's ID (via access token).  Used internal
  // to the DSS for restricting mutation and deletion operations to owner.  Used by USSs
  // to reject Operation update notifications originating from a USS that does not own
  // the Operation.
  string owner = 3;

  // The ID of the Subscription that is ensuring the Operation owner receives relevant
  // airspace updates.
  string subscription_id = 4;

  // End time of Operation.
  Time time_end = 5;

  // Beginning time of Operation.
  Time time_start = 6;
  string uss_base_url = 7;

  // Sequential version that the DSS increments every time the Operation changes.  A USS
  // may use this version to determine which Operation references have new details that
  // must be retrieved.
  int32 version = 8;
}

// GeoJSon Point, limited to 2D.
message Point {
  enum PointType {
    POINT_TYPE_POINT = 0;
  }

  double coordinates = 1;

  // The type of Geometry. In this case, must be 'Point' per GeoJSON spec.
  PointType type = 2;
}

// GeoJSon Polygon. Positions all 2D.
message Polygon {
  enum PolygonType {
    POLYGON_TYPE_POLYGON = 0;
  }

  // The number of polygons allowed.  Currently 1, implying no interior rings.  If this number is changes, the maxItems should be considered. From RFC7946: o  For type "Polygon", the "coordinates" member MUST be an array of linear ring coordinate arrays. o  For Polygons with more than one of these rings, the first MUST be the exterior ring, and any others MUST be interior rings.  The exterior ring bounds the surface, and the interior rings (if present) bound holes within the surface. Again, note we only allow a single set of coordinates, implying no interior rings.
  repeated Point coordinates = 1;

  // The type of Geometry. In this case, must be 'Polygon' per GeoJSON
  // spec.  Note that the "coordinates" member is validated to be be an
  // array of size one. This implies there are no interior rings allowed
  // currently.
  PolygonType type = 2;
}

// Location of the vehicle (UAS) as reported for UTM.
// Note: 'accuracy' values are required when extrapolated field is true
// and always in the entry for the current state.
message Position {
  PositionAccuracyHorizontal accuracy_h = 1;
  PositionAccuracyVertical accuracy_v = 2;
  Altitude altitude = 3;

  // True if this position was generated primarily by computation
  // rather than primarily from a direct instrument measurement.
  // Assumed false if not specified.
  bool extrapolated = 4;
  double latitude = 5;
  double longitude = 6;
}

// Parameters of a message informing of new full information for a Constraint.  Pushed (by a client, not the DSS) directly to clients with subscriptions when another client makes a change to airspace within a cell with a subscription.
message PutConstraintDetailsParameters {
  // Full information about the Constraint that has changed.  If this field is omitted,
  // the Constraint was deleted.  A newly-created Constraint can be differentiated from
  // an updated Constraint by examining the `version` field.  The `ovn` field in the
  // nested `reference` must be populated.
  Constraint constraint = 1;

  // ID of Constraint that has changed.
  string constraint_id = 2;

  // Subscription(s) prompting this notification.
  repeated SubscriptionState subscriptions = 3;
}

// Parameters for a request to create/update a ConstraintReference in the DSS.
message PutConstraintReferenceParameters {
  repeated Volume4D extents = 1;

  // To ensure consistency in read-modify-write operations and distributed systems, the client must
  // specify the version of this Constraint in the DSS that it is attempting to modify.  If a new
  // Constraint is being created, this version should be set to 0.
  int32 old_version = 2;
  string uss_base_url = 3;
}

message PutConstraintReferenceRequest {
  // EntityUUID of the Constraint.
  string entityuuid = 1;

  // Request body.
  PutConstraintReferenceParameters params = 2;
}

// Parameters of a message informing of detailed information for a peer Operation.
// Pushed (by a client, not the DSS) directly to clients with subscriptions when
// another client makes a change to airspace within a cell with a subscription.
message PutOperationDetailsParameters {
  // Full information about the Operation that has changed.  If this field is omitted,
  // the Operation was deleted.  A newly-created Operation can be differentiated from
  // an updated Operation by examining the `version` field.  The `ovn` field in the
  // nested `reference` must be populated.
  Operation operation = 1;

  // ID of Operation that has changed.
  string operation_id = 2;

  // Subscription(s) prompting this notification.
  repeated SubscriptionState subscriptions = 3;
}

// Parameters for a request to create an OperationReference in the DSS.
// A subscription to changes overlapping this volume may be implicitly created, but
// this can be overridden by providing the (optional) 'subscription_id' to use.
// Note: The implicit subscription is managed by the DSS, not the USS.
message PutOperationReferenceParameters {
  repeated Volume4D extents = 1;

  // Proof that the USS creating or mutating this Operation was aware of the current state of the
  // airspace, with the expectation that this Operation is therefore deconflicted from all relevant
  // features in the airspce.  This field is not required when declaring an Operation NonConforming
  // or Contingent, or when there are no relevant Entities in the airspace, but is otherwise required.
  // OVNs for Constraints are required if and only if the USS owning this Operation is considering
  // Constraints, which is determined by whether the Subscription associated with this Operation
  // triggers notifications for Constraints.
  string key = 2;

  // If an existing Subscription is not specified in `subscription_id`, then this field must be
  // populated.  When this field is populated, an implicit Subscription will be created and
  // associated with this Operation, and will generally be deleted automatically upon the
  // deletion of this Operation.
  ImplicitSubscriptionParameters new_subscription = 3;

  // To ensure consistency in read-modify-write operations and distributed systems, the client must
  // specify the version of this Operation in the DSS that it is attempting to modify.  If a new
  // Operation is being created, this version should be set to 0.
  int32 old_version = 4;
  OperationState state = 5;

  // The ID of an existing Subscription that the USS will use to keep the operator informed about
  // updates to relevant airspace information.  If this field is not provided, then the
  // `new_subscription` field must be provided in order to provide notification capability
  // for the Operation.  The Subscription specified by this ID must cover at least the area over
  // which this Operation is conducted, and it must provide notifications for Operations.
  string subscription_id = 6;
  string uss_base_url = 7;
}

message PutOperationReferenceRequest {
  // EntityUUID of the Operation.
  string entityuuid = 1;

  // Request body.
  PutOperationReferenceParameters params = 2;
}

// Parameters for a request to create/update a subscription in the DSS.
message PutSubscriptionParameters {
  Volume4D extents = 1;

  // If true, trigger notifications when Constraints are created, updated, or deleted.  Otherwise, changes in Constraints should not trigger notifications.
  bool notify_for_constraints = 2;

  // If true, trigger notifications when Operations are created, updated, or deleted.  Otherwise, changes in Operations should not trigger notifications.
  bool notify_for_operations = 3;

  // To ensure consistency in read-modify-write operations and distributed systems, the client must
  // specify the version of this Subscription in the DSS that it is attempting to modify.  If a new
  // Subscription is being created, this version should be set to 0.
  int32 old_version = 4;
  string uss_base_url = 5;
}

message PutSubscriptionRequest {
  // Request body.
  PutSubscriptionParameters params = 1;

  // SubscriptionUUID of the subscription of interest.
  string subscriptionid = 2;
}

// Response for a request to create or update a subscription.
message PutSubscriptionResponse {
  // Constraints in or near the subscription area at the time of creation/update,
  // if `notify_for_constraints` is true
  // was specified.
  repeated ConstraintReference constraints = 1;

  // Operations in or near the subscription area at the time of creation/update,
  // if `notify_for_operations` is true
  repeated OperationReference operations = 2;
  Subscription subscription = 3;
}

message QueryConstraintReferencesRequest {
  // Request body.
  SearchConstraintReferenceParameters params = 1;
}

message QuerySubscriptionsRequest {
  // Request body.
  SearchSubscriptionParameters params = 1;
}

message Radius {
  enum RadiusUnits {
    RADIUS_UNITS_M = 0;
  }

  // FIXM-compatible units.  Only meters ("M") are acceptable for UTM.
  RadiusUnits units = 1;

  // Distance from the centerpoint of a circular area, along the WGS84 ellipsoid.
  float value = 2;
}

// Parameters for a request to find ConstraintReferences matching the provided criteria.
message SearchConstraintReferenceParameters {
  Volume4D area_of_interest = 1;
}

// Response to DSS query for ConstraintReferences in an area of interest.
message SearchConstraintReferencesResponse {
  // ConstraintReferences in the area of interest.
  repeated ConstraintReference constraint_references = 1;
}

// Parameters for a request to find OperationReferences matching the provided criteria.
message SearchOperationReferenceParameters {
  Volume4D area_of_interest = 1;
}

// Response to DSS query for OperationReferences in an area of interest.
message SearchOperationReferenceResponse {
  // OperationReferences in the area of interest.
  repeated OperationReference operation_references = 1;
}

message SearchOperationReferencesRequest {
  // Request body.
  SearchOperationReferenceParameters params = 1;
}

// Parameters for a request to find Subscriptions matching the provided criteria.
message SearchSubscriptionParameters {
  Volume4D area_of_interest = 1;
}

// Response to DSS query for subscriptions in a particular geographic area.
message SearchSubscriptionsResponse {
  // Subscriptions that overlap the specified geographic area.
  repeated Subscription subscriptions = 1;
}

// Subscriber to notify of a change in the airspace.  This is provided by the DSS
// to a client changing the airspace, and it is the responsibility of that client
// to send a notification to the specified USS according to the change made to the
// airspace.
message SubscriberToNotify {
  // Subscription(s) prompting this notification.
  repeated SubscriptionState subscriptions = 1;
  string uss_base_url = 2;
}

// Specification of a geographic area that a client is interested
// in on an ongoing basis (e.g., "planning area").
message Subscription {
  // List of Operations (UUIDs) that are dependent on this Subscription.
  repeated string dependent_operations = 1;
  string id = 2;

  // True if this Subscription was implicitly created by the DSS via the creation of an
  // Operation, and should therefore be deleted by the DSS when that Operation is deleted.
  bool implicit_subscription = 3;
  int32 notification_index = 4;

  // If true, trigger notifications when Constraints are created, updated, or deleted.  Otherwise, changes in Constraints should not trigger notifications.
  bool notify_for_constraints = 5;

  // If true, trigger notifications when Operations are created, updated, or deleted.  Otherwise, changes in Operations should not trigger notifications.
  bool notify_for_operations = 6;

  // If set, this subscription will not receive notifications involving airspace changes
  // entirely after this time.
  Time time_end = 7;

  // If set, this subscription will not receive notifications involving airspace changes
  // entirely before this time.
  Time time_start = 8;
  string uss_base_url = 9;

  // Sequential version that the DSS increments every time the Subscription changes.  A USS
  // must specify this version when modifying an existing Subscription to ensure consistency
  // in read-modify-write operations and distributed systems.
  int32 version = 10;
}

// State of Subscription which is causing a notification to be sent.
message SubscriptionState {
  int32 notification_index = 1;
  string subscription_id = 2;
}

message Time {
  enum TimeFormat {
    TIME_FORMAT_RF_C3339 = 0;
  }

  TimeFormat format = 1;

  // RFC3339-formatted time/date string.  The time zone must be 'Z'.
  google.protobuf.Timestamp value = 2;
}

// Vehicle position, altitude, and velocity.
message VehicleTelemetry {
  string id = 1;
  Position position = 2;
  Time time_measured = 3;
  Velocity velocity = 4;
}

message Velocity {
  enum VelocityUnitsSpeed {
    VELOCITY_UNITS_SPEED_METERS_SECOND = 0;
  }

  // Ground speed in meters/second.
  float speed = 1;

  // Direction of flight expressed as a "True North-based" ground track angle.
  // This value is provided in degrees East of North with a minimum resolution of 1 degree.
  float track = 2;
  VelocityUnitsSpeed units_speed = 3;
}

// A three-dimensional geographic volume consisting of a vertically-extruded shape.  Exactly one of
// `outline_polygon` or `outline_circle` must be specified.
message Volume3D {
  // Minimum bounding altitude of this volume.
  Altitude altitude_lower = 1;

  // Maximum bounding altitude of this volume.
  Altitude altitude_upper = 2;

  // A circular geographic shape on the surface of the earth.
  Circle outline_circle = 3;

  // A polygonal geographic shape on the surface of the earth.
  Polygon outline_polygon = 4;
}

// Contiguous block of geographic spacetime.
message Volume4D {
  // End time of this volume.
  Time time_end = 1;

  // Beginning time of this volume.
  Time time_start = 2;
  Volume3D volume = 3;
}

service UTMAPIUSSDSSAndUSSUSSService {
  // Delete the specified Constraint reference from the DSS.
  rpc DeleteConstraintReference(DeleteConstraintReferenceRequest) returns (ChangeConstraintReferenceResponse) {
    option (google.api.http) = {
      delete: "/dss/v1/constraint_references/{entityuuid}"
    };
  }

  // Remove the specified Operation reference from the DSS.
  rpc DeleteOperationReference(DeleteOperationReferenceRequest) returns (ChangeOperationReferenceResponse) {
    option (google.api.http) = {
      delete: "/dss/v1/operation_references/{entityuuid}"
    };
  }

  // Remove the specified Subscription from the DSS.
  rpc DeleteSubscription(DeleteSubscriptionRequest) returns (DeleteSubscriptionResponse) {
    option (google.api.http) = {
      delete: "/dss/v1/subscriptions/{subscriptionid}"
    };
  }

  // Retrieve the specified Constraint reference from the DSS.
  rpc GetConstraintReference(GetConstraintReferenceRequest) returns (GetConstraintReferenceResponse) {
    option (google.api.http) = {
      get: "/dss/v1/constraint_references/{entityuuid}"
    };
  }

  // Retrieve the specified Operation reference from the DSS.
  rpc GetOperationReference(GetOperationReferenceRequest) returns (GetOperationReferenceResponse) {
    option (google.api.http) = {
      get: "/dss/v1/operation_references/{entityuuid}"
    };
  }

  // Retrieve the specified Subscription from the DSS.
  // 
  // Retrieve a specific subscription.
  rpc GetSubscription(GetSubscriptionRequest) returns (GetSubscriptionResponse) {
    option (google.api.http) = {
      get: "/dss/v1/subscriptions/{subscriptionid}"
    };
  }

  // Report information about communication issues to a DSS.
  // 
  // Report issues to a DSS. Data sent to this endpoint is archived.
  rpc MakeDssReport(MakeDssReportRequest) returns (ErrorReport) {
    option (google.api.http) = {
      post: "/dss/v1/reports"
      body: "params"
    };
  }

  // Create/Update the specified Constraint reference in the DSS.
  rpc PutConstraintReference(PutConstraintReferenceRequest) returns (ChangeConstraintReferenceResponse) {
    option (google.api.http) = {
      put: "/dss/v1/constraint_references/{entityuuid}"
      body: "params"
    };
  }

  // Create/Update the specified Operation reference in the DSS.
  rpc PutOperationReference(PutOperationReferenceRequest) returns (ChangeOperationReferenceResponse) {
    option (google.api.http) = {
      put: "/dss/v1/operation_references/{entityuuid}"
      body: "params"
    };
  }

  // Create/Update the specified Subscription in the DSS.
  // 
  // Create or update a subscription.
  // 
  // Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
  rpc PutSubscription(PutSubscriptionRequest) returns (PutSubscriptionResponse) {
    option (google.api.http) = {
      put: "/dss/v1/subscriptions/{subscriptionid}"
      body: "params"
    };
  }

  // Retrieve all Constraints references in the specified area/volume from the DSS.
  rpc QueryConstraintReferences(QueryConstraintReferencesRequest) returns (SearchConstraintReferencesResponse) {
    option (google.api.http) = {
      post: "/dss/v1/constraints/query"
      body: "params"
    };
  }

  // Retrieve all Subscriptions in the specified area/volume from the DSS.
  // 
  // Retrieve Subscriptions intersecting an area of interest.  Subscription
  // notifications are only triggered by (and contain full information of) changes to,
  // creation of, or deletion of, Entities referenced by or stored in the DSS;
  // they do not involve any data transfer (such as remote ID telemetry updates) apart
  // from Entity information.
  // 
  // Note that this parameter is a JSON object (in the 'request-body'). Note that either
  // or both of the 'altitude' and 'time' values may be omitted from this parameter.
  // 
  // Only Subscriptions belonging to the caller are returned.  This endpoint would be
  // used if a USS lost track of Subscriptions they had created and/or wanted to resolve
  // an error indicating that they had too many existing Subscriptions in an area.
  rpc QuerySubscriptions(QuerySubscriptionsRequest) returns (SearchSubscriptionsResponse) {
    option (google.api.http) = {
      post: "/dss/v1/subscriptions/query"
      body: "params"
    };
  }

  // Retrieve all Operation references in the specified area/volume/time from the DSS.
  rpc SearchOperationReferences(SearchOperationReferencesRequest) returns (SearchOperationReferenceResponse) {
    option (google.api.http) = {
      post: "/dss/v1/operation_references/query"
      body: "params"
    };
  }
}