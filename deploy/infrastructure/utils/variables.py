#! python3

from os import listdir
from os.path import isfile, join, abspath, dirname
from typing import Dict, List, Tuple
import hcl2

DEFINITIONS_PATH = join(abspath(dirname(__file__)), "definitions")
GENERATED_VARIABLES_FILENAME = "variables.tf"
GENERATED_TFVARS_FILENAME = "terraform.example.tfvars"
GENERATED_COMMENT = """# This file has been automatically generated by /deploy/infrastructure/utils/generate_terraform_variables.py.
# Please do not modify manually.
"""

# Variables per project
# terraform-google-kubernetes
GOOGLE_KUBERNETES_VARIABLES = [
    "google_project_name",
    "google_zone",
    "google_dns_managed_zone_name",
    "app_hostname",
    "crdb_hostname_suffix",
    "cluster_name",
    "node_count",
    "google_machine_type",
]

# terraform-commons-dss
COMMONS_DSS_VARIABLES = [
    "image",
    "authorization",
    "enable_scd",
    "should_init",
    "desired_rid_db_version",
    "desired_scd_db_version",
    "crdb_locality",
    "crdb_external_nodes",
    "kubernetes_storage_class",
    "kubernetes_namespace",
    "app_hostname",
    "crdb_hostname_suffix",
]

PROJECT_VARIABLES = {
    "../modules/terraform-google-dss": list(
        dict.fromkeys(GOOGLE_KUBERNETES_VARIABLES + COMMONS_DSS_VARIABLES)
    ),  # Preserves the items order.
    "../dependencies/terraform-google-kubernetes": GOOGLE_KUBERNETES_VARIABLES,
    "../dependencies/terraform-commons-dss": COMMONS_DSS_VARIABLES,
}


def is_example_project(path: str) -> bool:
    """
    Return if the path corresponds to a project which requires example files.
    """
    return '/modules/' in path


def load_tf_definitions() -> Dict[str, str]:
    """
    Load terraform variables definitions abd returns a dictionary
    where keys are the variable name and the value the content of the file.
    """
    variables = [
        f.replace(".tf", "")
        for f in listdir(DEFINITIONS_PATH)
        if isfile(join(DEFINITIONS_PATH, f))
    ]
    result = {}
    for variable in variables:
        with open(join(DEFINITIONS_PATH, f"{variable}.tf")) as f:
            result[variable] = f.read()
    return result


def parse_definition(variable_name: str, tf_definition: str) -> Tuple[str, str, str]:
    """
    Parse the tf content (hcl format) and retrieve the description field, variable_type and the default_value.
    """
    hcl_declaration = hcl2.loads(tf_definition)
    variables = hcl_declaration.get("variable")
    if len(variables) > 1:
        raise ValueError(
            f"More than one variable in {variable_name} definition file is not allowed. Content: {tf_definition}"
        )

    declared_var_name = list(variables[0].keys())[0]
    if declared_var_name != variable_name:
        raise ValueError(
            f"File name ({variable_name}) and variable name declaration ({declared_var_name}) do not match. Stop."
        )

    description = variables[0].get(declared_var_name).get("description", None)
    if description is None:
        raise ValueError(f"Description field required for variable {variable_name}.")

    value_type = variables[0].get(declared_var_name).get("type", None)
    if value_type is None:
        raise ValueError(f"Type field required for variable {variable_name}.")
    value_type = value_type[
        2:-1
    ]  # Value type format includes a ${...} wrapper. This removes the wrapper.

    default_value = variables[0].get(declared_var_name).get("default", None)

    if value_type == "bool":
        default_value = str(default_value).lower()

    return description, value_type, default_value


def write_file(filepath: str, content: str) -> None:
    print("*****")
    print("** " + filepath)
    print(content)
    with open(filepath, "wt") as file:
        file.write(content)


def comment(content: str) -> str:
    """
    This prefix the possibly multiline content with # to generate a commented block.
    """
    if content is None:
        return ""
    commented_lines = "\n".join([f"# {l}" for l in content.split("\n")])
    return commented_lines


def format_default_value(value: any, type: str) -> str:
    """
    Return the default value in the appropriate format.
    """
    if type == "string":
        return f'"{value if value else ""}"'
    if type.startswith("list"):
        return f"[]"
    if type.startswith("object"):
        return "{}"
    if type == "number":
        return value if value is not None else ""
    if type.startswith("bool"):
        return value if value is not None else "true|false"


def generate_variables_tf(variables: List[str], definitions: Dict[str, str]) -> str:
    """
    Generate the content of variables.tf based on the variables.
    variables contains the variables name to include in the content.
    definitions contains the definitions of all available variables.
    returns a tf file with the definitions of the variables.
    """
    content = GENERATED_COMMENT + "\n"
    for v in variables:
        if v not in definitions.keys():
            raise ValueError(f"{v} definition not found")
        content += definitions[v] + "\n\n"
    return content


def generate_example_tfvars(variables: List[str], definitions: Dict[str, str]) -> str:
    """
    Generate the content of terraform.example.tfvars based on the variables.
    variables contains the variables name to include in the content.
    definitions contains the definitions of all available variables.
    returns a tfvars file content with the example fields and comments.
    """
    content = GENERATED_COMMENT + "\n\n"
    for v in variables:
        if v not in definitions.keys():
            raise ValueError(f"{v} definition not found")
        description, value_type, default_value = parse_definition(v, definitions[v])
        content += f"# Variable: {v}\n"
        content += f"# Type: {value_type}\n"
        content += f"{comment(description)}\n"
        content += f"# Default: {default_value}\n" if default_value is not None else ""
        content += f"{'' if default_value is None else '#'}{v} = {format_default_value(default_value, value_type)}\n\n"
    return content


def generate(definitions: Dict[str, str]):
    """
    Generate by project the variables tf file and the example tfvars for example projects.
    """
    for path, variables in PROJECT_VARIABLES.items():
        # Generate variables
        var_filename = join(path, GENERATED_VARIABLES_FILENAME)
        content = generate_variables_tf(variables, definitions)
        write_file(var_filename, content)

        if is_example_project(path):
            # Generate terraform.tfvars.example
            tfvars_filename = join(path, GENERATED_TFVARS_FILENAME)
            content = generate_example_tfvars(variables, definitions)
            write_file(tfvars_filename, content)


if __name__ == "__main__":
    definitions = load_tf_definitions()
    generate(definitions)
